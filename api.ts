/* tslint:disable */
/* eslint-disable */
/**
 * BookMyDesk API with Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdminUser
 */
export interface AdminUser {
    /**
     * 
     * @type {number}
     * @memberof AdminUser
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AdminUser
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUser
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUser
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUser
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUser
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUser
     */
    roles: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUser
     */
    language: Language | null;
}
/**
 * 
 * @export
 * @interface AdminUserAllOf
 */
export interface AdminUserAllOf {
    /**
     * 
     * @type {number}
     * @memberof AdminUserAllOf
     */
    id: number;
}
/**
 * 
 * @export
 * @interface AdminUserCreate
 */
export interface AdminUserCreate {
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserCreate
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserCreate
     */
    roles: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserCreate
     */
    language: Language | null;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreate
     */
    companyId: string;
}
/**
 * 
 * @export
 * @interface AdminUserCreateAllOf
 */
export interface AdminUserCreateAllOf {
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreateAllOf
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserCreateAllOf
     */
    companyId: string;
}
/**
 * 
 * @export
 * @interface AdminUserProperties
 */
export interface AdminUserProperties {
    /**
     * 
     * @type {string}
     * @memberof AdminUserProperties
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserProperties
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserProperties
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserProperties
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserProperties
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserProperties
     */
    roles?: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserProperties
     */
    language?: Language | null;
}
/**
 * 
 * @export
 * @interface AdminUserUpdate
 */
export interface AdminUserUpdate {
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdate
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdate
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdate
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdate
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserUpdate
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserUpdate
     */
    roles?: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserUpdate
     */
    language?: Language | null;
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdate
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface AdminUserUpdateAllOf
 */
export interface AdminUserUpdateAllOf {
    /**
     * 
     * @type {string}
     * @memberof AdminUserUpdateAllOf
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface AdminUserWithRelations
 */
export interface AdminUserWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AdminUserWithRelations
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithRelations
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithRelations
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithRelations
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithRelations
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserWithRelations
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserWithRelations
     */
    roles: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserWithRelations
     */
    language: Language | null;
    /**
     * 
     * @type {Array<Company>}
     * @memberof AdminUserWithRelations
     */
    companies: Array<Company>;
}
/**
 * 
 * @export
 * @interface AdminUserWithRelationsAllOf
 */
export interface AdminUserWithRelationsAllOf {
    /**
     * 
     * @type {Array<Company>}
     * @memberof AdminUserWithRelationsAllOf
     */
    companies: Array<Company>;
}
/**
 * 
 * @export
 * @interface AdminUserWithoutId
 */
export interface AdminUserWithoutId {
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutId
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutId
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutId
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutId
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserWithoutId
     */
    newsletter?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserWithoutId
     */
    roles: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserWithoutId
     */
    language: Language | null;
}
/**
 * 
 * @export
 * @interface AdminUserWithoutIdAllOf
 */
export interface AdminUserWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutIdAllOf
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutIdAllOf
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserWithoutIdAllOf
     */
    email: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminUserWithoutIdAllOf
     */
    roles: Array<string>;
    /**
     * 
     * @type {Language}
     * @memberof AdminUserWithoutIdAllOf
     */
    language: Language | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum BillingType {
    Enterprise = 'enterprise',
    None = 'none',
    Free = 'free',
    Year = 'year',
    Month = 'month',
    ContactForm = 'contact-form'
}

/**
 * Type for checkin, usually manual
 * @export
 * @enum {string}
 */
export enum CheckInType {
    Manual = 'manual',
    Geofence = 'geofence',
    OnCreate = 'on_create'
}

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactPhone: string;
    /**
     * 
     * @type {Language}
     * @memberof Company
     */
    language: Language;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    checkInV2Enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    homeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof Company
     */
    billingType: BillingType;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    facilitymanagementEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    deskAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    deskExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    lunchAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    lunchExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    meetingAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    meetingExpirationTime?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    reservationForUserEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    hideCheckInTimeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    microsoftSsoEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    microsoftSyncEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    visitorReservationConfirmEmailEnabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof Company
     */
    created?: any | null;
}
/**
 * 
 * @export
 * @interface CompanyProperties
 */
export interface CompanyProperties {
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    contactFirstname?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    contactLastname?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    contactEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    contactPhone?: string;
    /**
     * 
     * @type {Language}
     * @memberof CompanyProperties
     */
    language?: Language;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    reservationWindowLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    checkInV2Enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    homeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    billingPricePerCustomer?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    billingStartDate?: string;
    /**
     * 
     * @type {BillingType}
     * @memberof CompanyProperties
     */
    billingType?: BillingType;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    facilitymanagementEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyProperties
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    deskAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    deskExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    lunchAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    lunchExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    meetingAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyProperties
     */
    meetingExpirationTime?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    reservationForUserEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    hideCheckInTimeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    microsoftSsoEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    microsoftSyncEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyProperties
     */
    visitorReservationConfirmEmailEnabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CompanyProperties
     */
    created?: any | null;
}
/**
 * 
 * @export
 * @interface CompanyWithCounts
 */
export interface CompanyWithCounts {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    contactPhone: string;
    /**
     * 
     * @type {Language}
     * @memberof CompanyWithCounts
     */
    language: Language;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    checkInV2Enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    homeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof CompanyWithCounts
     */
    billingType: BillingType;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    facilitymanagementEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithCounts
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    deskAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    deskExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    lunchAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    lunchExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    meetingAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    meetingExpirationTime?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    reservationForUserEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    hideCheckInTimeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    microsoftSsoEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    microsoftSyncEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithCounts
     */
    visitorReservationConfirmEmailEnabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CompanyWithCounts
     */
    created?: any | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    locationCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    mapCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    userCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCounts
     */
    reservationCount: number;
}
/**
 * 
 * @export
 * @interface CompanyWithCountsAllOf
 */
export interface CompanyWithCountsAllOf {
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCountsAllOf
     */
    locationCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCountsAllOf
     */
    mapCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCountsAllOf
     */
    userCount: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithCountsAllOf
     */
    reservationCount: number;
}
/**
 * 
 * @export
 * @interface CompanyWithRelations
 */
export interface CompanyWithRelations {
    /**
     * 
     * @type {Array<CompanyWithRelationsAllOfTokens>}
     * @memberof CompanyWithRelations
     */
    tokens: Array<CompanyWithRelationsAllOfTokens>;
    /**
     * 
     * @type {Array<Location>}
     * @memberof CompanyWithRelations
     */
    locations: Array<Location>;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    contactPhone: string;
    /**
     * 
     * @type {Language}
     * @memberof CompanyWithRelations
     */
    language: Language;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    checkInV2Enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    homeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof CompanyWithRelations
     */
    billingType: BillingType;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    facilitymanagementEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelations
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    deskAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    deskExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    lunchAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    lunchExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    meetingAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithRelations
     */
    meetingExpirationTime?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    reservationForUserEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    hideCheckInTimeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    microsoftSsoEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    microsoftSyncEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithRelations
     */
    visitorReservationConfirmEmailEnabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CompanyWithRelations
     */
    created?: any | null;
}
/**
 * 
 * @export
 * @interface CompanyWithRelationsAllOf
 */
export interface CompanyWithRelationsAllOf {
    /**
     * 
     * @type {Array<CompanyWithRelationsAllOfTokens>}
     * @memberof CompanyWithRelationsAllOf
     */
    tokens: Array<CompanyWithRelationsAllOfTokens>;
    /**
     * 
     * @type {Array<Location>}
     * @memberof CompanyWithRelationsAllOf
     */
    locations: Array<Location>;
}
/**
 * 
 * @export
 * @interface CompanyWithRelationsAllOfTokens
 */
export interface CompanyWithRelationsAllOfTokens {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithRelationsAllOfTokens
     */
    token_type: CompanyWithRelationsAllOfTokensTokenTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CompanyWithRelationsAllOfTokensTokenTypeEnum {
    MicrosoftGraphAdmin = 'microsoft_graph_admin'
}

/**
 * 
 * @export
 * @interface CompanyWithoutId
 */
export interface CompanyWithoutId {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    contactPhone: string;
    /**
     * 
     * @type {Language}
     * @memberof CompanyWithoutId
     */
    language: Language;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    checkInV2Enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    homeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof CompanyWithoutId
     */
    billingType: BillingType;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    facilitymanagementEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutId
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    deskAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    deskExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    lunchAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    lunchExpirationTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    meetingAutoCheckoutTime?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutId
     */
    meetingExpirationTime?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    reservationForUserEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    hideCheckInTimeEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    microsoftSsoEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    microsoftSyncEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyWithoutId
     */
    visitorReservationConfirmEmailEnabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CompanyWithoutId
     */
    created?: any | null;
}
/**
 * 
 * @export
 * @interface CompanyWithoutIdAllOf
 */
export interface CompanyWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    contactPhone: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutIdAllOf
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyWithoutIdAllOf
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyWithoutIdAllOf
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof CompanyWithoutIdAllOf
     */
    billingType: BillingType;
    /**
     * 
     * @type {Language}
     * @memberof CompanyWithoutIdAllOf
     */
    language: Language;
}
/**
 * 
 * @export
 * @interface FavoriteUserWithoutId
 */
export interface FavoriteUserWithoutId {
    /**
     * ID of the other user
     * @type {string}
     * @memberof FavoriteUserWithoutId
     */
    favoriteUserId: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    email: string;
}
/**
 * 
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    seat_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    rrule: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject10
     */
    include_parking?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    type: InlineObject10TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    visitor_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    visitor_email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    visitor_phone?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject10TypeEnum {
    Normal = 'normal',
    Visitor = 'visitor'
}

/**
 * 
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject13
     */
    userIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     * 
     * @type {CheckInType}
     * @memberof InlineObject15
     */
    type: CheckInType;
}
/**
 * 
 * @export
 * @interface InlineObject16
 */
export interface InlineObject16 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject16
     */
    type: string;
}
/**
 * 
 * @export
 * @interface InlineObject17
 */
export interface InlineObject17 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject17
     */
    reservationIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineObject17
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    selector: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    resetToken: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    app_version: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    platform: string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    location_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    report_reason_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    details: string;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    company: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject5
     */
    employee_count?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    lastname: string;
    /**
     * 
     * @type {Language}
     * @memberof InlineObject5
     */
    language: Language;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    privacy?: InlineObject5PrivacyEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    remarks: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    subscription: InlineObject5SubscriptionEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    updates?: InlineObject5UpdatesEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject5PrivacyEnum {
    _1 = '1'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineObject5SubscriptionEnum {
    Free = 'free',
    Month = 'month',
    Year = 'year',
    Enterprise = 'enterprise',
    ContactForm = 'contact-form'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineObject5UpdatesEnum {
    _1 = '1'
}

/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    first_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    infix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    last_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    language?: InlineObject6LanguageEnum;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    location_tracking_enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    privacy_mode_enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    push_enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    check_in_push_enabled?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject6LanguageEnum {
    Nl = 'nl',
    De = 'de',
    En = 'en'
}

/**
 * 
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    seat_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    date: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject8
     */
    include_parking?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    type: InlineObject8TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    visitor_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    visitor_email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    visitor_phone?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject8TypeEnum {
    Normal = 'normal',
    Visitor = 'visitor'
}

/**
 * 
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    seat_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    date: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject9
     */
    include_parking?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    type: InlineObject9TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    visitor_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    visitor_email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    visitor_phone?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject9TypeEnum {
    Normal = 'normal',
    Visitor = 'visitor'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    version?: string;
    /**
     * Current head
     * @type {string}
     * @memberof InlineResponse200
     */
    head?: string;
    /**
     * Current latest commit in master
     * @type {string}
     * @memberof InlineResponse200
     */
    master?: string;
    /**
     * Current branch
     * @type {string}
     * @memberof InlineResponse200
     */
    branch?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20010
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20010Result}
     * @memberof InlineResponse20010
     */
    result: InlineResponse20010Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20010Result
 */
export interface InlineResponse20010Result {
    /**
     * 
     * @type {Company}
     * @memberof InlineResponse20010Result
     */
    company?: Company;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20011
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20011Result}
     * @memberof InlineResponse20011
     */
    result: InlineResponse20011Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20011Result
 */
export interface InlineResponse20011Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011Result
     */
    total: number;
    /**
     * 
     * @type {Array<ReportReasonWithRelations & Operations>}
     * @memberof InlineResponse20011Result
     */
    items: Array<ReportReasonWithRelations & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20012
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20012Result}
     * @memberof InlineResponse20012
     */
    result: InlineResponse20012Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20012Result
 */
export interface InlineResponse20012Result {
    /**
     * 
     * @type {ReportReason}
     * @memberof InlineResponse20012Result
     */
    reportReason: ReportReason;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20013
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20013Result}
     * @memberof InlineResponse20013
     */
    result: InlineResponse20013Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20013Result
 */
export interface InlineResponse20013Result {
    /**
     * 
     * @type {ReportReasonWithRelations}
     * @memberof InlineResponse20013Result
     */
    reportReason?: ReportReasonWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20014
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20014Result}
     * @memberof InlineResponse20014
     */
    result: InlineResponse20014Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20014Result
 */
export interface InlineResponse20014Result {
    /**
     * 
     * @type {ReportReason}
     * @memberof InlineResponse20014Result
     */
    reportReason?: ReportReason;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20015
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20015Result}
     * @memberof InlineResponse20015
     */
    result: InlineResponse20015Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20015Result
 */
export interface InlineResponse20015Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015Result
     */
    total: number;
    /**
     * 
     * @type {Array<ReportWithRelations>}
     * @memberof InlineResponse20015Result
     */
    items: Array<ReportWithRelations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20016
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20016Result}
     * @memberof InlineResponse20016
     */
    result: InlineResponse20016Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20016Result
 */
export interface InlineResponse20016Result {
    /**
     * 
     * @type {Report}
     * @memberof InlineResponse20016Result
     */
    report: Report;
}
/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20017
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20017Result}
     * @memberof InlineResponse20017
     */
    result: InlineResponse20017Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20017Result
 */
export interface InlineResponse20017Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20017Result
     */
    total: number;
    /**
     * 
     * @type {Array<AdminUserWithRelations & Operations & object>}
     * @memberof InlineResponse20017Result
     */
    items: Array<AdminUserWithRelations & Operations & object>;
}
/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20018
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20018Result}
     * @memberof InlineResponse20018
     */
    result: InlineResponse20018Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20018Result
 */
export interface InlineResponse20018Result {
    /**
     * 
     * @type {AdminUser & Operations}
     * @memberof InlineResponse20018Result
     */
    adminUser: AdminUser & Operations;
}
/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20019
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20019Result}
     * @memberof InlineResponse20019
     */
    result: InlineResponse20019Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20019Result
 */
export interface InlineResponse20019Result {
    /**
     * 
     * @type {AdminUser}
     * @memberof InlineResponse20019Result
     */
    adminUser?: AdminUser;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2002
     */
    created?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2002
     */
    failed?: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20020
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {OAuthPasswordGrantResponse}
     * @memberof InlineResponse20020
     */
    result: OAuthPasswordGrantResponse;
}
/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20021
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20021Result}
     * @memberof InlineResponse20021
     */
    result: InlineResponse20021Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20021Result
 */
export interface InlineResponse20021Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021Result
     */
    total: number;
    /**
     * 
     * @type {Array<UserWithRelations & Operations>}
     * @memberof InlineResponse20021Result
     */
    items: Array<UserWithRelations & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20022
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20022Result}
     * @memberof InlineResponse20022
     */
    result: InlineResponse20022Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20022Result
 */
export interface InlineResponse20022Result {
    /**
     * 
     * @type {UserWithRelations & Operations}
     * @memberof InlineResponse20022Result
     */
    user: UserWithRelations & Operations;
}
/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20023
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20023Result}
     * @memberof InlineResponse20023
     */
    result: InlineResponse20023Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20023Result
 */
export interface InlineResponse20023Result {
    /**
     * 
     * @type {UserWithRelations}
     * @memberof InlineResponse20023Result
     */
    user?: UserWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20024
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20024Result}
     * @memberof InlineResponse20024
     */
    result: InlineResponse20024Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20024Result
 */
export interface InlineResponse20024Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024Result
     */
    total: number;
    /**
     * 
     * @type {Array<Location & Operations>}
     * @memberof InlineResponse20024Result
     */
    items: Array<Location & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20025
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20025Result}
     * @memberof InlineResponse20025
     */
    result: InlineResponse20025Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20025Result
 */
export interface InlineResponse20025Result {
    /**
     * 
     * @type {Location & Operations}
     * @memberof InlineResponse20025Result
     */
    location: Location & Operations;
}
/**
 * 
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20026
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20026Result}
     * @memberof InlineResponse20026
     */
    result: InlineResponse20026Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20026Result
 */
export interface InlineResponse20026Result {
    /**
     * 
     * @type {Location}
     * @memberof InlineResponse20026Result
     */
    location?: Location;
}
/**
 * 
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20027
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20027Result}
     * @memberof InlineResponse20027
     */
    result: InlineResponse20027Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20027Result
 */
export interface InlineResponse20027Result {
    /**
     * 
     * @type {Array<MapObject>}
     * @memberof InlineResponse20027Result
     */
    items: Array<MapObject>;
}
/**
 * 
 * @export
 * @interface InlineResponse20028
 */
export interface InlineResponse20028 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20028
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20028Result}
     * @memberof InlineResponse20028
     */
    result: InlineResponse20028Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20028Result
 */
export interface InlineResponse20028Result {
    /**
     * 
     * @type {MapObject}
     * @memberof InlineResponse20028Result
     */
    mapObject: MapObject;
}
/**
 * 
 * @export
 * @interface InlineResponse20029
 */
export interface InlineResponse20029 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20029
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20029Result}
     * @memberof InlineResponse20029
     */
    result: InlineResponse20029Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20029Result
 */
export interface InlineResponse20029Result {
    /**
     * 
     * @type {MapObject}
     * @memberof InlineResponse20029Result
     */
    mapObject?: MapObject;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2003
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2003Result}
     * @memberof InlineResponse2003
     */
    result: InlineResponse2003Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20030
 */
export interface InlineResponse20030 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20030
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20030Result}
     * @memberof InlineResponse20030
     */
    result: InlineResponse20030Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20030Result
 */
export interface InlineResponse20030Result {
    /**
     * 
     * @type {Array<SeatWithRelations>}
     * @memberof InlineResponse20030Result
     */
    items: Array<SeatWithRelations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20031
 */
export interface InlineResponse20031 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20031
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20031Result}
     * @memberof InlineResponse20031
     */
    result: InlineResponse20031Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20031Result
 */
export interface InlineResponse20031Result {
    /**
     * 
     * @type {Array<UsedSeat>}
     * @memberof InlineResponse20031Result
     */
    items: Array<UsedSeat>;
}
/**
 * 
 * @export
 * @interface InlineResponse20032
 */
export interface InlineResponse20032 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20032
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20032Result}
     * @memberof InlineResponse20032
     */
    result: InlineResponse20032Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20032Result
 */
export interface InlineResponse20032Result {
    /**
     * 
     * @type {SeatWithRelations}
     * @memberof InlineResponse20032Result
     */
    seat: SeatWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse20033
 */
export interface InlineResponse20033 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20033
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20033Result}
     * @memberof InlineResponse20033
     */
    result: InlineResponse20033Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20033Result
 */
export interface InlineResponse20033Result {
    /**
     * 
     * @type {SeatWithRelations}
     * @memberof InlineResponse20033Result
     */
    seat?: SeatWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse20034
 */
export interface InlineResponse20034 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20034
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20034Result}
     * @memberof InlineResponse20034
     */
    result: InlineResponse20034Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20034Result
 */
export interface InlineResponse20034Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20034Result
     */
    total: number;
    /**
     * 
     * @type {Array<SeatTag & Operations>}
     * @memberof InlineResponse20034Result
     */
    items: Array<SeatTag & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20035
 */
export interface InlineResponse20035 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20035
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20035Result}
     * @memberof InlineResponse20035
     */
    result: InlineResponse20035Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20035Result
 */
export interface InlineResponse20035Result {
    /**
     * 
     * @type {SeatTag}
     * @memberof InlineResponse20035Result
     */
    seatTag: SeatTag;
}
/**
 * 
 * @export
 * @interface InlineResponse20036
 */
export interface InlineResponse20036 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20036
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20036Result}
     * @memberof InlineResponse20036
     */
    result: InlineResponse20036Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20036Result
 */
export interface InlineResponse20036Result {
    /**
     * 
     * @type {SeatTag}
     * @memberof InlineResponse20036Result
     */
    seatTag?: SeatTag;
}
/**
 * 
 * @export
 * @interface InlineResponse20037
 */
export interface InlineResponse20037 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20037
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20037Result}
     * @memberof InlineResponse20037
     */
    result: InlineResponse20037Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20037Result
 */
export interface InlineResponse20037Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20037Result
     */
    total: number;
    /**
     * 
     * @type {Array<UserGroup & Operations>}
     * @memberof InlineResponse20037Result
     */
    items: Array<UserGroup & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20038
 */
export interface InlineResponse20038 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20038
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20038Result}
     * @memberof InlineResponse20038
     */
    result: InlineResponse20038Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20038Result
 */
export interface InlineResponse20038Result {
    /**
     * 
     * @type {UserGroup}
     * @memberof InlineResponse20038Result
     */
    userGroup: UserGroup;
}
/**
 * 
 * @export
 * @interface InlineResponse20039
 */
export interface InlineResponse20039 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20039
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20039Result}
     * @memberof InlineResponse20039
     */
    result: InlineResponse20039Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20039Result
 */
export interface InlineResponse20039Result {
    /**
     * 
     * @type {UserGroup}
     * @memberof InlineResponse20039Result
     */
    userGroup?: UserGroup;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Result
 */
export interface InlineResponse2003Result {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003Result
     */
    isCompatible: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2004
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2004Result}
     * @memberof InlineResponse2004
     */
    result: InlineResponse2004Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20040
 */
export interface InlineResponse20040 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20040
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20040Result}
     * @memberof InlineResponse20040
     */
    result: InlineResponse20040Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20040Result
 */
export interface InlineResponse20040Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20040Result
     */
    total: number;
    /**
     * 
     * @type {Array<Timeslot & Operations>}
     * @memberof InlineResponse20040Result
     */
    items: Array<Timeslot & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20041
 */
export interface InlineResponse20041 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20041
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20041Result}
     * @memberof InlineResponse20041
     */
    result: InlineResponse20041Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20041Result
 */
export interface InlineResponse20041Result {
    /**
     * 
     * @type {Timeslot}
     * @memberof InlineResponse20041Result
     */
    timeslot: Timeslot;
}
/**
 * 
 * @export
 * @interface InlineResponse20042
 */
export interface InlineResponse20042 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20042
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20042Result}
     * @memberof InlineResponse20042
     */
    result: InlineResponse20042Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20042Result
 */
export interface InlineResponse20042Result {
    /**
     * 
     * @type {Timeslot}
     * @memberof InlineResponse20042Result
     */
    timeslot?: Timeslot;
}
/**
 * 
 * @export
 * @interface InlineResponse20043
 */
export interface InlineResponse20043 {
    /**
     * 
     * @type {InlineResponse20043Result}
     * @memberof InlineResponse20043
     */
    result: InlineResponse20043Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20043Result
 */
export interface InlineResponse20043Result {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043Result
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043Result
     */
    reservation_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043Result
     */
    check_in_time: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043Result
     */
    check_out_time: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043Result
     */
    type: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20044
 */
export interface InlineResponse20044 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20044
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20044Result}
     * @memberof InlineResponse20044
     */
    result: InlineResponse20044Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20044Result
 */
export interface InlineResponse20044Result {
    /**
     * 
     * @type {ReservationWithRelations}
     * @memberof InlineResponse20044Result
     */
    reservation?: ReservationWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse20045
 */
export interface InlineResponse20045 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20045
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20045
     */
    result: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20046
 */
export interface InlineResponse20046 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20046
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20046Result}
     * @memberof InlineResponse20046
     */
    result: InlineResponse20046Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20046Result
 */
export interface InlineResponse20046Result {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20046Result
     */
    allowed: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse20047
 */
export interface InlineResponse20047 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20047
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20047Result}
     * @memberof InlineResponse20047
     */
    result: InlineResponse20047Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20047Result
 */
export interface InlineResponse20047Result {
    /**
     * 
     * @type {Array<ReservationWithRelations>}
     * @memberof InlineResponse20047Result
     */
    updatedReservations?: Array<ReservationWithRelations>;
    /**
     * 
     * @type {Array<InlineResponse20047ResultFailedReservations>}
     * @memberof InlineResponse20047Result
     */
    failedReservations?: Array<InlineResponse20047ResultFailedReservations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20047ResultFailedReservations
 */
export interface InlineResponse20047ResultFailedReservations {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20047ResultFailedReservations
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20047ResultFailedReservations
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20047ResultFailedReservations
     */
    date: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20048
 */
export interface InlineResponse20048 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20048
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20048Result}
     * @memberof InlineResponse20048
     */
    result: InlineResponse20048Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20048Result
 */
export interface InlineResponse20048Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20048Result
     */
    total: number;
    /**
     * 
     * @type {Array<ReservationWithRelations>}
     * @memberof InlineResponse20048Result
     */
    items: Array<ReservationWithRelations>;
}
/**
 * 
 * @export
 * @interface InlineResponse20049
 */
export interface InlineResponse20049 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20049
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20049Result}
     * @memberof InlineResponse20049
     */
    result: InlineResponse20049Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20049Result
 */
export interface InlineResponse20049Result {
    /**
     * 
     * @type {Array<InlineResponse20049ResultItems>}
     * @memberof InlineResponse20049Result
     */
    items: Array<InlineResponse20049ResultItems>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20049Result
     */
    seatCount: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20049Result
     */
    parkingCount: number;
}
/**
 * 
 * @export
 * @interface InlineResponse20049ResultItems
 */
export interface InlineResponse20049ResultItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultItems
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultItems
     */
    minTimeslot?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultItems
     */
    maxTimeslot?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20049ResultItems
     */
    seatReservationsCount: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20049ResultItems
     */
    parkingSpotsClaimed: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Result
 */
export interface InlineResponse2004Result {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Result
     */
    url: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2005
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2005Result}
     * @memberof InlineResponse2005
     */
    result: InlineResponse2005Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20050
 */
export interface InlineResponse20050 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20050
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20050Result}
     * @memberof InlineResponse20050
     */
    result: InlineResponse20050Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20050Result
 */
export interface InlineResponse20050Result {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050Result
     */
    authUrl: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Result
 */
export interface InlineResponse2005Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Result
     */
    total: number;
    /**
     * 
     * @type {Array<MapWithRelations & Operations>}
     * @memberof InlineResponse2005Result
     */
    items: Array<MapWithRelations & Operations>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2006
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2006Result}
     * @memberof InlineResponse2006
     */
    result: InlineResponse2006Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Result
 */
export interface InlineResponse2006Result {
    /**
     * 
     * @type {MapWithRelations & Operations}
     * @memberof InlineResponse2006Result
     */
    map: MapWithRelations & Operations;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2007
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2007Result}
     * @memberof InlineResponse2007
     */
    result: InlineResponse2007Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2007Result
 */
export interface InlineResponse2007Result {
    /**
     * 
     * @type {MapWithRelations}
     * @memberof InlineResponse2007Result
     */
    map?: MapWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2008
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2008Result}
     * @memberof InlineResponse2008
     */
    result: InlineResponse2008Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2008Result
 */
export interface InlineResponse2008Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008Result
     */
    total: number;
    /**
     * 
     * @type {Array<CompanyWithCounts>}
     * @memberof InlineResponse2008Result
     */
    items: Array<CompanyWithCounts>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2009
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2009Result}
     * @memberof InlineResponse2009
     */
    result: InlineResponse2009Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2009Result
 */
export interface InlineResponse2009Result {
    /**
     * 
     * @type {CompanyWithRelations}
     * @memberof InlineResponse2009Result
     */
    company: CompanyWithRelations;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse201
     */
    meta: ResponseMeta;
    /**
     * 
     * @type {InlineResponse201Result}
     * @memberof InlineResponse201
     */
    result: InlineResponse201Result;
}
/**
 * 
 * @export
 * @interface InlineResponse201Result
 */
export interface InlineResponse201Result {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse201Result
     */
    errors: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse201Result
     */
    successes: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {Array<InlineResponse400Errors>}
     * @memberof InlineResponse400
     */
    errors: Array<InlineResponse400Errors>;
}
/**
 * 
 * @export
 * @interface InlineResponse4001
 */
export interface InlineResponse4001 {
    /**
     * 
     * @type {InlineResponse4001Error}
     * @memberof InlineResponse4001
     */
    error: InlineResponse4001Error;
}
/**
 * 
 * @export
 * @interface InlineResponse4001Error
 */
export interface InlineResponse4001Error {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse4001Error
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse4001Error
     */
    message: string;
}
/**
 * 
 * @export
 * @interface InlineResponse400Errors
 */
export interface InlineResponse400Errors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400Errors
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400Errors
     */
    message: string;
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export interface InlineResponse404 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse404
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse409
 */
export interface InlineResponse409 {
    /**
     * 
     * @type {InlineResponse409Error}
     * @memberof InlineResponse409
     */
    error: InlineResponse409Error;
}
/**
 * 
 * @export
 * @interface InlineResponse409Error
 */
export interface InlineResponse409Error {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse409Error
     */
    code: InlineResponse409ErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse409Error
     */
    message: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse409ErrorCodeEnum {
    NUMBER_1004 = 1004
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum Language {
    Nl = 'NL',
    De = 'DE',
    En = 'EN'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum LanguageLowercase {
    Nl = 'nl',
    De = 'de',
    En = 'en'
}

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    name: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof Location
     */
    address: LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    parkingCount: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    visitorReservationEmail?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    bookingLimit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Location
     */
    visible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    centerLat?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    centerLng?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    proximityRadius?: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    timezone: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    id: string;
}
/**
 * 
 * @export
 * @interface LocationAddress
 */
export interface LocationAddress {
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    street: string;
    /**
     * 
     * @type {number}
     * @memberof LocationAddress
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    addition: string;
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    city: string;
    /**
     * ISO 3166-1 Alpha-2 country codes https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements
     * @type {string}
     * @memberof LocationAddress
     */
    countryCode?: string;
}
/**
 * 
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    name?: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof LocationProperties
     */
    address?: LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    parkingCount?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    contactEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    visitorReservationEmail?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    bookingLimit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationProperties
     */
    visible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    centerLat?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    centerLng?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    proximityRadius?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    timezone?: string;
}
/**
 * 
 * @export
 * @interface LocationWithoutId
 */
export interface LocationWithoutId {
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    name: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof LocationWithoutId
     */
    address: LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    parkingCount: number;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    visitorReservationEmail?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    bookingLimit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationWithoutId
     */
    visible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    centerLat?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    centerLng?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    proximityRadius?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    timezone: string;
}
/**
 * 
 * @export
 * @interface LocationWithoutIdAllOf
 */
export interface LocationWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutIdAllOf
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutIdAllOf
     */
    parkingCount: number;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutIdAllOf
     */
    contactEmail: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof LocationWithoutIdAllOf
     */
    address: LocationAddress;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutIdAllOf
     */
    timezone: string;
}
/**
 * 
 * @export
 * @interface MapAllOf
 */
export interface MapAllOf {
    /**
     * 
     * @type {string}
     * @memberof MapAllOf
     */
    id: string;
}
/**
 * 
 * @export
 * @interface MapObject
 */
export interface MapObject {
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    layer: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    typeName: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    subTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    rotation: number;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    id: string;
}
/**
 * 
 * @export
 * @interface MapObjectProperties
 */
export interface MapObjectProperties {
    /**
     * 
     * @type {string}
     * @memberof MapObjectProperties
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectProperties
     */
    layer?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectProperties
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    y?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObjectProperties
     */
    typeName?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectProperties
     */
    subTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectProperties
     */
    rotation?: number;
}
/**
 * 
 * @export
 * @interface MapObjectWithoutId
 */
export interface MapObjectWithoutId {
    /**
     * 
     * @type {string}
     * @memberof MapObjectWithoutId
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectWithoutId
     */
    layer: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectWithoutId
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    y: number;
    /**
     * 
     * @type {string}
     * @memberof MapObjectWithoutId
     */
    typeName: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    rotation: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectWithoutId
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObjectWithoutId
     */
    subTypeName?: string;
}
/**
 * 
 * @export
 * @interface MapProperties
 */
export interface MapProperties {
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MapProperties
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof MapProperties
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapProperties
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapProperties
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    botUserEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof MapProperties
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof MapProperties
     */
    locationId?: string;
}
/**
 * 
 * @export
 * @interface MapWithRelations
 */
export interface MapWithRelations {
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MapWithRelations
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof MapWithRelations
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapWithRelations
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapWithRelations
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    botUserEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof MapWithRelations
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelations
     */
    locationId: string;
    /**
     * 
     * @type {MapWithRelationsAllOfLocation}
     * @memberof MapWithRelations
     */
    location: MapWithRelationsAllOfLocation;
}
/**
 * 
 * @export
 * @interface MapWithRelationsAllOf
 */
export interface MapWithRelationsAllOf {
    /**
     * 
     * @type {MapWithRelationsAllOfLocation}
     * @memberof MapWithRelationsAllOf
     */
    location: MapWithRelationsAllOfLocation;
}
/**
 * 
 * @export
 * @interface MapWithRelationsAllOfLocation
 */
export interface MapWithRelationsAllOfLocation {
    /**
     * 
     * @type {string}
     * @memberof MapWithRelationsAllOfLocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithRelationsAllOfLocation
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof MapWithRelationsAllOfLocation
     */
    visible?: boolean;
}
/**
 * 
 * @export
 * @interface MapWithoutId
 */
export interface MapWithoutId {
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MapWithoutId
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof MapWithoutId
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapWithoutId
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapWithoutId
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    botUserEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof MapWithoutId
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutId
     */
    locationId: string;
}
/**
 * 
 * @export
 * @interface MapWithoutIdAllOf
 */
export interface MapWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof MapWithoutIdAllOf
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MapWithoutIdAllOf
     */
    locationId: string;
}
/**
 * 
 * @export
 * @interface MeAdmin
 */
export interface MeAdmin {
    /**
     * 
     * @type {number}
     * @memberof MeAdmin
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    lastName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    roles: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    companyIds: Array<string>;
    /**
     * 
     * @type {BillingType}
     * @memberof MeAdmin
     */
    billingType?: BillingType;
    /**
     * 
     * @type {Language}
     * @memberof MeAdmin
     */
    language: Language | null;
}
/**
 * 
 * @export
 * @interface MeUser
 */
export interface MeUser {
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    first_name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    last_name: string;
    /**
     * 
     * @type {LanguageLowercase}
     * @memberof MeUser
     */
    language: LanguageLowercase;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    location_tracking_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    privacy_mode_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    push_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    check_in_push_enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    profileImageUrl: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof MeUser
     */
    companies: Array<object>;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof MeUser
     */
    userGroups: Array<UserGroup>;
    /**
     * 
     * @type {MeUserOperations}
     * @memberof MeUser
     */
    _operations?: MeUserOperations;
}
/**
 * 
 * @export
 * @interface MeUserOperations
 */
export interface MeUserOperations {
    /**
     * Can update name fields (first, infix, last)
     * @type {boolean}
     * @memberof MeUserOperations
     */
    canUpdateName?: boolean;
    /**
     * Must (force) the user to update their name fields (first, infix, last)
     * @type {boolean}
     * @memberof MeUserOperations
     */
    mustUpdateName?: boolean;
}
/**
 * 
 * @export
 * @interface ModelMap
 */
export interface ModelMap {
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelMap
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelMap
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelMap
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelMap
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    botUserEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelMap
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    locationId: string;
}
/**
 * 
 * @export
 * @interface OAuthPasswordGrantResponse
 */
export interface OAuthPasswordGrantResponse {
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    token_type: string;
}
/**
 * 
 * @export
 * @interface Operations
 */
export interface Operations {
    /**
     * 
     * @type {OperationsOperations}
     * @memberof Operations
     */
    _operations?: OperationsOperations;
}
/**
 * 
 * @export
 * @interface OperationsOperations
 */
export interface OperationsOperations {
    /**
     * Can delete this entity
     * @type {boolean}
     * @memberof OperationsOperations
     */
    canDelete?: boolean;
    /**
     * Reason why the entity cannot be deleted
     * @type {string}
     * @memberof OperationsOperations
     */
    cannotDeleteDescription?: string;
    /**
     * Can update name for this user
     * @type {boolean}
     * @memberof OperationsOperations
     */
    canUpdateName?: boolean;
    /**
     * Can update email for this user
     * @type {boolean}
     * @memberof OperationsOperations
     */
    canUpdateEmail?: boolean;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    details: string;
}
/**
 * 
 * @export
 * @interface ReportProperties
 */
export interface ReportProperties {
    /**
     * 
     * @type {string}
     * @memberof ReportProperties
     */
    locationId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportProperties
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface ReportReason
 */
export interface ReportReason {
    /**
     * 
     * @type {string}
     * @memberof ReportReason
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReason
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReason
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface ReportReasonProperties
 */
export interface ReportReasonProperties {
    /**
     * 
     * @type {string}
     * @memberof ReportReasonProperties
     */
    locationId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonProperties
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface ReportReasonWithRelations
 */
export interface ReportReasonWithRelations {
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithRelations
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithRelations
     */
    reason: string;
    /**
     * 
     * @type {ReportReasonWithRelationsAllOfLocation}
     * @memberof ReportReasonWithRelations
     */
    location: ReportReasonWithRelationsAllOfLocation;
}
/**
 * 
 * @export
 * @interface ReportReasonWithRelationsAllOf
 */
export interface ReportReasonWithRelationsAllOf {
    /**
     * 
     * @type {ReportReasonWithRelationsAllOfLocation}
     * @memberof ReportReasonWithRelationsAllOf
     */
    location: ReportReasonWithRelationsAllOfLocation;
}
/**
 * 
 * @export
 * @interface ReportReasonWithRelationsAllOfLocation
 */
export interface ReportReasonWithRelationsAllOfLocation {
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithRelationsAllOfLocation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithRelationsAllOfLocation
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ReportReasonWithoutId
 */
export interface ReportReasonWithoutId {
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithoutId
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithoutId
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface ReportReasonWithoutIdAllOf
 */
export interface ReportReasonWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithoutIdAllOf
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportReasonWithoutIdAllOf
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface ReportWithRelations
 */
export interface ReportWithRelations {
    /**
     * 
     * @type {string}
     * @memberof ReportWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReportWithRelations
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportWithRelations
     */
    details: string;
    /**
     * 
     * @type {ReportReasonWithRelationsAllOfLocation}
     * @memberof ReportWithRelations
     */
    location: ReportReasonWithRelationsAllOfLocation;
    /**
     * 
     * @type {ReportReason}
     * @memberof ReportWithRelations
     */
    reason: ReportReason;
    /**
     * 
     * @type {User}
     * @memberof ReportWithRelations
     */
    user: User;
}
/**
 * 
 * @export
 * @interface ReportWithRelationsAllOf
 */
export interface ReportWithRelationsAllOf {
    /**
     * 
     * @type {ReportReasonWithRelationsAllOfLocation}
     * @memberof ReportWithRelationsAllOf
     */
    location: ReportReasonWithRelationsAllOfLocation;
    /**
     * 
     * @type {ReportReason}
     * @memberof ReportWithRelationsAllOf
     */
    reason: ReportReason;
    /**
     * 
     * @type {User}
     * @memberof ReportWithRelationsAllOf
     */
    user: User;
}
/**
 * 
 * @export
 * @interface ReportWithoutId
 */
export interface ReportWithoutId {
    /**
     * 
     * @type {string}
     * @memberof ReportWithoutId
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportWithoutId
     */
    details: string;
}
/**
 * 
 * @export
 * @interface ReportWithoutIdAllOf
 */
export interface ReportWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReportWithoutIdAllOf
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof ReportWithoutIdAllOf
     */
    details: string;
}
/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     * @deprecated
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     * @deprecated
     */
    date: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof Reservation
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof Reservation
     */
    dateEnd: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof Reservation
     */
    includeParking: boolean;
    /**
     * undefined if not checked in Or if check in times are hidden (company setting)
     * @type {string}
     * @memberof Reservation
     */
    checkedInTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    checkedOutTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorName: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorPhone: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    expiredAt?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Reservation
     */
    cancelled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    cancelledReason?: string;
    /**
     * 
     * @type {ReservationStatus}
     * @memberof Reservation
     */
    status: ReservationStatus;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    createdByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    reoccurReferenceId?: string;
}
/**
 * 
 * @export
 * @interface ReservationAdd
 */
export interface ReservationAdd {
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    seatId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     * @deprecated
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     * @deprecated
     */
    date?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationAdd
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationAdd
     */
    dateEnd?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationAdd
     */
    includeParking?: boolean;
    /**
     * 
     * @type {ReservationType}
     * @memberof ReservationAdd
     */
    type: ReservationType;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    visitorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    visitorEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    visitorPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAdd
     */
    rrule?: string;
}
/**
 * 
 * @export
 * @interface ReservationAddAllOf
 */
export interface ReservationAddAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReservationAddAllOf
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationAddAllOf
     */
    rrule?: string;
}
/**
 * 
 * @export
 * @interface ReservationCanCreate
 */
export interface ReservationCanCreate {
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    companyId: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    locationId?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof ReservationCanCreate
     */
    seatType: SeatType;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    seatId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     * @deprecated
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     * @deprecated
     */
    date: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationCanCreate
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationCanCreate
     */
    dateEnd?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationCanCreate
     */
    includeParking?: boolean;
    /**
     * 
     * @type {ReservationType}
     * @memberof ReservationCanCreate
     */
    type: ReservationType;
    /**
     * 
     * @type {string}
     * @memberof ReservationCanCreate
     */
    rrule?: string;
}
/**
 * 
 * @export
 * @interface ReservationOperations
 */
export interface ReservationOperations {
    /**
     * 
     * @type {ReservationOperationsOperations}
     * @memberof ReservationOperations
     */
    _operations?: ReservationOperationsOperations;
}
/**
 * 
 * @export
 * @interface ReservationOperationsOperations
 */
export interface ReservationOperationsOperations {
    /**
     * Can cancel this reservation
     * @type {boolean}
     * @memberof ReservationOperationsOperations
     */
    canCancel?: boolean;
}
/**
 * 
 * @export
 * @interface ReservationProperties
 */
export interface ReservationProperties {
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     * @deprecated
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     * @deprecated
     */
    date?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationProperties
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationProperties
     */
    dateEnd?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationProperties
     */
    includeParking?: boolean;
    /**
     * undefined if not checked in Or if check in times are hidden (company setting)
     * @type {string}
     * @memberof ReservationProperties
     */
    checkedInTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    checkedOutTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    visitorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    visitorEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    visitorPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    expiredAt?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationProperties
     */
    cancelled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    cancelledReason?: string;
    /**
     * 
     * @type {ReservationStatus}
     * @memberof ReservationProperties
     */
    status?: ReservationStatus;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    createdByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationProperties
     */
    reoccurReferenceId?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ReservationStatus {
    Expired = 'expired',
    Cancelled = 'cancelled',
    CheckedOut = 'checkedOut',
    CheckedIn = 'checkedIn',
    Reserved = 'reserved'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ReservationType {
    Normal = 'normal',
    Visitor = 'visitor',
    Home = 'home'
}

/**
 * 
 * @export
 * @interface ReservationUpdate
 */
export interface ReservationUpdate {
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     */
    seatId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     * @deprecated
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     * @deprecated
     */
    date?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationUpdate
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationUpdate
     */
    dateEnd?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationUpdate
     */
    includeParking?: boolean;
    /**
     * 
     * @type {ReservationType}
     * @memberof ReservationUpdate
     */
    type: ReservationType;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     */
    visitorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     */
    visitorEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdate
     */
    visitorPhone?: string;
}
/**
 * 
 * @export
 * @interface ReservationUpdateReoccurring
 */
export interface ReservationUpdateReoccurring {
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    seatId: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     * @deprecated
     */
    to?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    dateEnd?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationUpdateReoccurring
     */
    includeParking?: boolean;
    /**
     * 
     * @type {ReservationType}
     * @memberof ReservationUpdateReoccurring
     */
    type: ReservationType;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    visitorName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    visitorEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReservationUpdateReoccurring
     */
    visitorPhone?: string | null;
}
/**
 * 
 * @export
 * @interface ReservationWithRelations
 */
export interface ReservationWithRelations {
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     * @deprecated
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     * @deprecated
     */
    date: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithRelations
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithRelations
     */
    dateEnd: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithRelations
     */
    includeParking: boolean;
    /**
     * undefined if not checked in Or if check in times are hidden (company setting)
     * @type {string}
     * @memberof ReservationWithRelations
     */
    checkedInTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    checkedOutTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    visitorName: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    visitorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    visitorPhone: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    expiredAt?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithRelations
     */
    cancelled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    cancelledReason?: string;
    /**
     * 
     * @type {ReservationStatus}
     * @memberof ReservationWithRelations
     */
    status: ReservationStatus;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    createdByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithRelations
     */
    reoccurReferenceId?: string;
    /**
     * 
     * @type {ReservationOperationsOperations}
     * @memberof ReservationWithRelations
     */
    _operations?: ReservationOperationsOperations;
    /**
     * 
     * @type {Seat & object}
     * @memberof ReservationWithRelations
     */
    seat: Seat & object | null;
    /**
     * 
     * @type {User}
     * @memberof ReservationWithRelations
     */
    user: User;
    /**
     * 
     * @type {User}
     * @memberof ReservationWithRelations
     */
    createdByUser?: User;
}
/**
 * 
 * @export
 * @interface ReservationWithRelationsAllOf
 */
export interface ReservationWithRelationsAllOf {
    /**
     * 
     * @type {Seat & object}
     * @memberof ReservationWithRelationsAllOf
     */
    seat: Seat & object | null;
    /**
     * 
     * @type {User}
     * @memberof ReservationWithRelationsAllOf
     */
    user: User;
    /**
     * 
     * @type {User}
     * @memberof ReservationWithRelationsAllOf
     */
    createdByUser?: User;
}
/**
 * 
 * @export
 * @interface ReservationWithoutId
 */
export interface ReservationWithoutId {
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     * @deprecated
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     * @deprecated
     */
    date: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithoutId
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithoutId
     */
    dateEnd: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithoutId
     */
    includeParking: boolean;
    /**
     * undefined if not checked in Or if check in times are hidden (company setting)
     * @type {string}
     * @memberof ReservationWithoutId
     */
    checkedInTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    checkedOutTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    visitorName: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    visitorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    visitorPhone: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    expiredAt?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithoutId
     */
    cancelled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    cancelledReason?: string;
    /**
     * 
     * @type {ReservationStatus}
     * @memberof ReservationWithoutId
     */
    status: ReservationStatus;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    createdByUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutId
     */
    reoccurReferenceId?: string;
}
/**
 * 
 * @export
 * @interface ReservationWithoutIdAllOf
 */
export interface ReservationWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     * @deprecated
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     * @deprecated
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     * @deprecated
     */
    date: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    dateStart?: string;
    /**
     * https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    dateEnd: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithoutIdAllOf
     */
    includeParking: boolean;
    /**
     * undefined if not checked in Or if check in times are hidden (company setting)
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    checkedInTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    checkedOutTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    visitorName: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    visitorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    visitorPhone: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationWithoutIdAllOf
     */
    expiredAt?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationWithoutIdAllOf
     */
    cancelled?: boolean;
    /**
     * 
     * @type {ReservationStatus}
     * @memberof ReservationWithoutIdAllOf
     */
    status: ReservationStatus;
}
/**
 * Information about this response (response time and status)
 * @export
 * @interface ResponseMeta
 */
export interface ResponseMeta {
    /**
     * 
     * @type {number}
     * @memberof ResponseMeta
     */
    status: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMeta
     */
    took: number;
}
/**
 * 
 * @export
 * @interface Seat
 */
export interface Seat {
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Seat
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof Seat
     */
    coordY: number;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof Seat
     */
    seatType: SeatType;
    /**
     * 
     * @type {boolean}
     * @memberof Seat
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof Seat
     */
    notFutureReservable?: boolean;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof Seat
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof Seat
     */
    seatTags?: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatOperations
 */
export interface SeatOperations {
    /**
     * 
     * @type {SeatOperationsOperations}
     * @memberof SeatOperations
     */
    _operations?: SeatOperationsOperations;
}
/**
 * 
 * @export
 * @interface SeatOperationsOperations
 */
export interface SeatOperationsOperations {
    /**
     * Can deactivate this entity
     * @type {boolean}
     * @memberof SeatOperationsOperations
     */
    canDeactivate?: boolean;
    /**
     * Can deactivate this entity
     * @type {boolean}
     * @memberof SeatOperationsOperations
     */
    canDelete?: boolean;
}
/**
 * 
 * @export
 * @interface SeatProperties
 */
export interface SeatProperties {
    /**
     * 
     * @type {string}
     * @memberof SeatProperties
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatProperties
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatProperties
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SeatProperties
     */
    coordX?: number;
    /**
     * 
     * @type {number}
     * @memberof SeatProperties
     */
    coordY?: number;
    /**
     * 
     * @type {string}
     * @memberof SeatProperties
     */
    blockfilter?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatProperties
     */
    seatType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeatProperties
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof SeatProperties
     */
    notFutureReservable?: boolean;
}
/**
 * 
 * @export
 * @interface SeatSeatTag
 */
export interface SeatSeatTag {
    /**
     * 
     * @type {string}
     * @memberof SeatSeatTag
     */
    id: string;
}
/**
 * 
 * @export
 * @interface SeatTag
 */
export interface SeatTag {
    /**
     * 
     * @type {string}
     * @memberof SeatTag
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof SeatTag
     */
    id: string;
}
/**
 * 
 * @export
 * @interface SeatTagProperties
 */
export interface SeatTagProperties {
    /**
     * 
     * @type {string}
     * @memberof SeatTagProperties
     */
    label?: string;
}
/**
 * 
 * @export
 * @interface SeatTagWithoutId
 */
export interface SeatTagWithoutId {
    /**
     * 
     * @type {string}
     * @memberof SeatTagWithoutId
     */
    label: string;
}
/**
 * 
 * @export
 * @interface SeatTagWithoutIdAllOf
 */
export interface SeatTagWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof SeatTagWithoutIdAllOf
     */
    label: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SeatType {
    Desk = 'desk',
    Lunch = 'lunch',
    Meeting = 'meeting'
}

/**
 * 
 * @export
 * @interface SeatTypeStatistic
 */
export interface SeatTypeStatistic {
    /**
     * 
     * @type {number}
     * @memberof SeatTypeStatistic
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof SeatTypeStatistic
     */
    used: number;
    /**
     * 
     * @type {number}
     * @memberof SeatTypeStatistic
     */
    max: number;
}
/**
 * 
 * @export
 * @interface SeatUpdate
 */
export interface SeatUpdate {
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SeatUpdate
     */
    coordX?: number;
    /**
     * 
     * @type {number}
     * @memberof SeatUpdate
     */
    coordY?: number;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatUpdate
     */
    seatType?: SeatType;
    /**
     * 
     * @type {boolean}
     * @memberof SeatUpdate
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof SeatUpdate
     */
    notFutureReservable?: boolean;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatUpdate
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatUpdate
     */
    seatTags?: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatUpdateAllOf
 */
export interface SeatUpdateAllOf {
    /**
     * 
     * @type {SeatType}
     * @memberof SeatUpdateAllOf
     */
    seatType?: SeatType;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatUpdateAllOf
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatUpdateAllOf
     */
    seatTags?: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatUserGroup
 */
export interface SeatUserGroup {
    /**
     * 
     * @type {string}
     * @memberof SeatUserGroup
     */
    id: string;
    /**
     * 
     * @type {Array<SeatUserGroupConditions>}
     * @memberof SeatUserGroup
     */
    conditions?: Array<SeatUserGroupConditions>;
}
/**
 * 
 * @export
 * @interface SeatUserGroupConditions
 */
export interface SeatUserGroupConditions {
    /**
     * Zero based weekday, Sunday - Saturday = 0 - 6
     * @type {number}
     * @memberof SeatUserGroupConditions
     */
    weekday: number;
    /**
     * 
     * @type {string}
     * @memberof SeatUserGroupConditions
     */
    timeFrom: string;
    /**
     * 
     * @type {string}
     * @memberof SeatUserGroupConditions
     */
    timeTo: string;
}
/**
 * 
 * @export
 * @interface SeatWithRelations
 */
export interface SeatWithRelations {
    /**
     * 
     * @type {string}
     * @memberof SeatWithRelations
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithRelations
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithRelations
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithRelations
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SeatWithRelations
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof SeatWithRelations
     */
    coordY: number;
    /**
     * 
     * @type {string}
     * @memberof SeatWithRelations
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatWithRelations
     */
    seatType: SeatType;
    /**
     * 
     * @type {boolean}
     * @memberof SeatWithRelations
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof SeatWithRelations
     */
    notFutureReservable?: boolean;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatWithRelations
     */
    userGroups: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatTag>}
     * @memberof SeatWithRelations
     */
    seatTags: Array<SeatTag>;
    /**
     * 
     * @type {SeatOperationsOperations}
     * @memberof SeatWithRelations
     */
    _operations?: SeatOperationsOperations;
}
/**
 * 
 * @export
 * @interface SeatWithRelationsAllOf
 */
export interface SeatWithRelationsAllOf {
    /**
     * 
     * @type {Array<SeatTag>}
     * @memberof SeatWithRelationsAllOf
     */
    seatTags: Array<SeatTag>;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatWithRelationsAllOf
     */
    userGroups: Array<SeatUserGroup>;
}
/**
 * 
 * @export
 * @interface SeatWithoutId
 */
export interface SeatWithoutId {
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutId
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutId
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutId
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SeatWithoutId
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof SeatWithoutId
     */
    coordY: number;
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutId
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatWithoutId
     */
    seatType: SeatType;
    /**
     * 
     * @type {boolean}
     * @memberof SeatWithoutId
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof SeatWithoutId
     */
    notFutureReservable?: boolean;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatWithoutId
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatWithoutId
     */
    seatTags?: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatWithoutIdAllOf
 */
export interface SeatWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutIdAllOf
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof SeatWithoutIdAllOf
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SeatWithoutIdAllOf
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof SeatWithoutIdAllOf
     */
    coordY: number;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatWithoutIdAllOf
     */
    seatType: SeatType;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatWithoutIdAllOf
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatWithoutIdAllOf
     */
    seatTags?: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface Timeslot
 */
export interface Timeslot {
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    to: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof Timeslot
     */
    type: TimeslotType;
}
/**
 * 
 * @export
 * @interface TimeslotProperties
 */
export interface TimeslotProperties {
    /**
     * 
     * @type {string}
     * @memberof TimeslotProperties
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotProperties
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotProperties
     */
    to?: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof TimeslotProperties
     */
    type?: TimeslotType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TimeslotType {
    Desk = 'desk',
    Lunch = 'lunch',
    Visitor = 'visitor',
    Meeting = 'meeting'
}

/**
 * 
 * @export
 * @interface TimeslotWithoutId
 */
export interface TimeslotWithoutId {
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutId
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutId
     */
    to: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof TimeslotWithoutId
     */
    type: TimeslotType;
}
/**
 * 
 * @export
 * @interface TimeslotWithoutIdAllOf
 */
export interface TimeslotWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutIdAllOf
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutIdAllOf
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof TimeslotWithoutIdAllOf
     */
    to: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof TimeslotWithoutIdAllOf
     */
    type: TimeslotType;
}
/**
 * 
 * @export
 * @interface UsedSeat
 */
export interface UsedSeat {
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof UsedSeat
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof UsedSeat
     */
    coordY: number;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof UsedSeat
     */
    seatType: SeatType;
    /**
     * 
     * @type {boolean}
     * @memberof UsedSeat
     */
    isActive?: boolean;
    /**
     * this is a seat that can only be booked in the future
     * @type {boolean}
     * @memberof UsedSeat
     */
    notFutureReservable?: boolean;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof UsedSeat
     */
    userGroups?: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof UsedSeat
     */
    seatTags?: Array<SeatSeatTag>;
    /**
     * 
     * @type {boolean}
     * @memberof UsedSeat
     */
    dirty: boolean;
}
/**
 * 
 * @export
 * @interface UsedSeatAllOf
 */
export interface UsedSeatAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof UsedSeatAllOf
     */
    dirty: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    infix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    activeSince?: string;
    /**
     * 
     * @type {Language}
     * @memberof User
     */
    language: Language;
    /**
     * 
     * @type {UserStatus}
     * @memberof User
     */
    status?: UserStatus;
    /**
     * Is this user favorite of the calling user?
     * @type {boolean}
     * @memberof User
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {Array<UserGroupLink>}
     * @memberof User
     */
    userGroups: Array<UserGroupLink>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string | null;
}
/**
 * 
 * @export
 * @interface UserAllOf
 */
export interface UserAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserAllOf
     */
    id: string | null;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    email: string;
    /**
     * 
     * @type {Language}
     * @memberof UserCreate
     */
    language: Language;
    /**
     * 
     * @type {Array<UserGroupLink>}
     * @memberof UserCreate
     */
    userGroups: Array<UserGroupLink>;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserCreate
     */
    status?: UserStatus;
}
/**
 * 
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof UserGroup
     */
    reservationWindowLength?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    id: string;
}
/**
 * 
 * @export
 * @interface UserGroupAllOf
 */
export interface UserGroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserGroupAllOf
     */
    id: string;
}
/**
 * 
 * @export
 * @interface UserGroupLink
 */
export interface UserGroupLink {
    /**
     * 
     * @type {string}
     * @memberof UserGroupLink
     */
    id: string;
}
/**
 * 
 * @export
 * @interface UserGroupProperties
 */
export interface UserGroupProperties {
    /**
     * 
     * @type {string}
     * @memberof UserGroupProperties
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof UserGroupProperties
     */
    reservationWindowLength?: number | null;
}
/**
 * 
 * @export
 * @interface UserGroupWithoutId
 */
export interface UserGroupWithoutId {
    /**
     * 
     * @type {string}
     * @memberof UserGroupWithoutId
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof UserGroupWithoutId
     */
    reservationWindowLength?: number | null;
}
/**
 * 
 * @export
 * @interface UserGroupWithoutIdAllOf
 */
export interface UserGroupWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserGroupWithoutIdAllOf
     */
    label: string;
}
/**
 * 
 * @export
 * @interface UserProperties
 */
export interface UserProperties {
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    infix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProperties
     */
    activeSince?: string;
    /**
     * 
     * @type {Language}
     * @memberof UserProperties
     */
    language?: Language;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserProperties
     */
    status?: UserStatus;
    /**
     * Is this user favorite of the calling user?
     * @type {boolean}
     * @memberof UserProperties
     */
    isFavorite?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum UserStatus {
    Active = 'active',
    Inactive = 'inactive'
}

/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    email?: string;
    /**
     * 
     * @type {Language}
     * @memberof UserUpdate
     */
    language?: Language;
    /**
     * 
     * @type {Array<UserGroupLink>}
     * @memberof UserUpdate
     */
    userGroups?: Array<UserGroupLink>;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserUpdate
     */
    status?: UserStatus;
}
/**
 * 
 * @export
 * @interface UserWithRelations
 */
export interface UserWithRelations {
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    firstName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    infix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    lastName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    email: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    activeSince?: string;
    /**
     * 
     * @type {Language}
     * @memberof UserWithRelations
     */
    language: Language;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserWithRelations
     */
    status?: UserStatus;
    /**
     * Is this user favorite of the calling user?
     * @type {boolean}
     * @memberof UserWithRelations
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof UserWithRelations
     */
    userGroups: Array<UserGroup>;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    id: string | null;
    /**
     * 
     * @type {Array<UserWithRelationsAllOfSsoProviders>}
     * @memberof UserWithRelations
     */
    ssoProviders: Array<UserWithRelationsAllOfSsoProviders>;
}
/**
 * 
 * @export
 * @interface UserWithRelationsAllOf
 */
export interface UserWithRelationsAllOf {
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof UserWithRelationsAllOf
     */
    userGroups: Array<UserGroup>;
    /**
     * 
     * @type {Array<UserWithRelationsAllOfSsoProviders>}
     * @memberof UserWithRelationsAllOf
     */
    ssoProviders: Array<UserWithRelationsAllOfSsoProviders>;
}
/**
 * 
 * @export
 * @interface UserWithRelationsAllOfSsoProviders
 */
export interface UserWithRelationsAllOfSsoProviders {
    /**
     * 
     * @type {string}
     * @memberof UserWithRelationsAllOfSsoProviders
     */
    provider?: UserWithRelationsAllOfSsoProvidersProviderEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserWithRelationsAllOfSsoProvidersProviderEnum {
    MicrosoftGraph = 'microsoft_graph'
}

/**
 * 
 * @export
 * @interface UserWithoutId
 */
export interface UserWithoutId {
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    firstName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    infix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    lastName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    email: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutId
     */
    activeSince?: string;
    /**
     * 
     * @type {Language}
     * @memberof UserWithoutId
     */
    language: Language;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserWithoutId
     */
    status?: UserStatus;
    /**
     * Is this user favorite of the calling user?
     * @type {boolean}
     * @memberof UserWithoutId
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {Array<UserGroupLink>}
     * @memberof UserWithoutId
     */
    userGroups: Array<UserGroupLink>;
}
/**
 * 
 * @export
 * @interface UserWithoutIdAllOf
 */
export interface UserWithoutIdAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserWithoutIdAllOf
     */
    firstName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutIdAllOf
     */
    lastName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutIdAllOf
     */
    email: string | null;
    /**
     * 
     * @type {Language}
     * @memberof UserWithoutIdAllOf
     */
    language: Language;
    /**
     * 
     * @type {Array<UserGroupLink>}
     * @memberof UserWithoutIdAllOf
     */
    userGroups: Array<UserGroupLink>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AdminUserCreate} adminUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdminUser: async (adminUserCreate: AdminUserCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserCreate' is not null or undefined
            assertParamExists('addAdminUser', 'adminUserCreate', adminUserCreate)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompanyWithoutId} companyWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany: async (companyWithoutId: CompanyWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyWithoutId' is not null or undefined
            assertParamExists('addCompany', 'companyWithoutId', companyWithoutId)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a favorite user
         * @param {FavoriteUserWithoutId} favoriteUserWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFavoriteUser: async (favoriteUserWithoutId: FavoriteUserWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteUserWithoutId' is not null or undefined
            assertParamExists('addFavoriteUser', 'favoriteUserWithoutId', favoriteUserWithoutId)
            const localVarPath = `/v3/favoriteUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(favoriteUserWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation: async (locationWithoutId: LocationWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationWithoutId' is not null or undefined
            assertParamExists('addLocation', 'locationWithoutId', locationWithoutId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MapWithoutId} mapWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMap: async (mapWithoutId: MapWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapWithoutId' is not null or undefined
            assertParamExists('addMap', 'mapWithoutId', mapWithoutId)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapFile: async (mapId: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('addMapFile', 'mapId', mapId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addMapFile', 'file', file)
            const localVarPath = `/v3/map/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MapObjectWithoutId} mapObjectWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapObject: async (mapObjectWithoutId: MapObjectWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectWithoutId' is not null or undefined
            assertParamExists('addMapObject', 'mapObjectWithoutId', mapObjectWithoutId)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapObjectWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOriginalMapFile: async (mapId: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('addOriginalMapFile', 'mapId', mapId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addOriginalMapFile', 'file', file)
            const localVarPath = `/v3/map/originalImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProfileImage: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addProfileImage', 'file', file)
            const localVarPath = `/me/profileImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReportReasonWithoutId} reportReasonWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportReason: async (reportReasonWithoutId: ReportReasonWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonWithoutId' is not null or undefined
            assertParamExists('addReportReason', 'reportReasonWithoutId', reportReasonWithoutId)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportReasonWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReservationAdd} reservationAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReservation: async (reservationAdd: ReservationAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationAdd' is not null or undefined
            assertParamExists('addReservation', 'reservationAdd', reservationAdd)
            const localVarPath = `/v3/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeatWithoutId} seatWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeat: async (seatWithoutId: SeatWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatWithoutId' is not null or undefined
            assertParamExists('addSeat', 'seatWithoutId', seatWithoutId)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeatTagWithoutId} seatTagWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeatTag: async (seatTagWithoutId: SeatTagWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatTagWithoutId' is not null or undefined
            assertParamExists('addSeatTag', 'seatTagWithoutId', seatTagWithoutId)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatTagWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TimeslotWithoutId} timeslotWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeslot: async (timeslotWithoutId: TimeslotWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotWithoutId' is not null or undefined
            assertParamExists('addTimeslot', 'timeslotWithoutId', timeslotWithoutId)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timeslotWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userCreate: UserCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('addUser', 'userCreate', userCreate)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserGroupWithoutId} userGroupWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserGroup: async (userGroupWithoutId: UserGroupWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGroupWithoutId' is not null or undefined
            assertParamExists('addUserGroup', 'userGroupWithoutId', userGroupWithoutId)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userGroupWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to test if a reservation with the provided properties is allowed to be created
         * @param {ReservationCanCreate} reservationCanCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canCreateReservation: async (reservationCanCreate: ReservationCanCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationCanCreate' is not null or undefined
            assertParamExists('canCreateReservation', 'reservationCanCreate', reservationCanCreate)
            const localVarPath = `/v3/reservation/canCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationCanCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation: async (inlineObject17: InlineObject17, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject17' is not null or undefined
            assertParamExists('cancelReservation', 'inlineObject17', inlineObject17)
            const localVarPath = `/v3/reservation/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject17, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminUser: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteAdminUser', 'userId', userId)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCompany', 'companyId', companyId)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a favorite user
         * @param {string} favoriteUserId ID of the other user to remove from favorites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFavoriteUser: async (favoriteUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteUserId' is not null or undefined
            assertParamExists('deleteFavoriteUser', 'favoriteUserId', favoriteUserId)
            const localVarPath = `/v3/favoriteUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (favoriteUserId !== undefined) {
                localVarQueryParameter['favoriteUserId'] = favoriteUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation: async (locationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('deleteLocation', 'locationId', locationId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('deleteMap', 'mapId', mapId)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapObject: async (mapObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('deleteMapObject', 'mapObjectId', mapObjectId)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {string} [fromReservationId] Delete this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReoccurringReservation: async (reoccurReferenceId: string, fromReservationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reoccurReferenceId' is not null or undefined
            assertParamExists('deleteReoccurringReservation', 'reoccurReferenceId', reoccurReferenceId)
            const localVarPath = `/v3/reservation/reoccurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reoccurReferenceId !== undefined) {
                localVarQueryParameter['reoccurReferenceId'] = reoccurReferenceId;
            }

            if (fromReservationId !== undefined) {
                localVarQueryParameter['fromReservationId'] = fromReservationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportReason: async (reportReasonId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('deleteReportReason', 'reportReasonId', reportReasonId)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation: async (reservationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('deleteReservation', 'reservationId', reservationId)
            const localVarPath = `/v3/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reservationId !== undefined) {
                localVarQueryParameter['reservationId'] = reservationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Reservation
         * @summary Delete Reservation
         * @param {string} reservationId Reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservationForApp: async (reservationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('deleteReservationForApp', 'reservationId', reservationId)
            const localVarPath = `/reservation/{reservation_id}`
                .replace(`{${"reservation_id"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeat: async (seatId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('deleteSeat', 'seatId', seatId)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatTag: async (tagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteSeatTag', 'tagId', tagId)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeslot: async (timeslotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('deleteTimeslot', 'timeslotId', timeslotId)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteUserGroup', 'groupId', groupId)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdminUserEmails: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/export/adminUserEmails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCompanyUserCount: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/export/companyUserCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportReservations: async (companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('exportReservations', 'companyId', companyId)
            const localVarPath = `/v3/reservations/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fromOperator !== undefined) {
                localVarQueryParameter['fromOperator'] = fromOperator;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seatType'] = seatType;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * throw api error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        failGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminUser: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAdminUser', 'userId', userId)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany', 'companyId', companyId)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany4App: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany4App', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [locationId] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations: async (companyId: string, from?: string, to?: string, locationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyReservations', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (locationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocation', 'locationId', locationId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} [seatType] Deprecated, use seatStatistics instead
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats: async (locationId: string, date: string, from: string, to: string, seatType?: 'desk' | 'lunch' | 'meeting', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocationStats', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getLocationStats', 'date', date)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getLocationStats', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getLocationStats', 'to', to)
            const localVarPath = `/v2/location/{location_id}/stats`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seat_type'] = seatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getMap', 'mapId', mapId)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapImage: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getMapImage', 'mapId', mapId)
            const localVarPath = `/map/{mapId}/image`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapImageUrl: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getMapImageUrl', 'mapId', mapId)
            const localVarPath = `/map/{mapId}/imageUrl`
                .replace(`{${"mapId"}}`, encodeURIComponent(String(mapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapObject: async (mapObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('getMapObject', 'mapObjectId', mapObjectId)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations: async (companyId?: string, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOriginalMapImageUrl: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getOriginalMapImageUrl', 'mapId', mapId)
            const localVarPath = `/v3/map/originalImageUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReport', 'reportId', reportId)
            const localVarPath = `/v3/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportId !== undefined) {
                localVarQueryParameter['reportId'] = reportId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportReason: async (reportReasonId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('getReportReason', 'reportReasonId', reportReasonId)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeat: async (seatId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('getSeat', 'seatId', seatId)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatTag: async (tagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getSeatTag', 'tagId', tagId)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeslot: async (timeslotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('getTimeslot', 'timeslotId', timeslotId)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getUserGroup', 'groupId', groupId)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import users by uploading a CSV (; as delimiter) containing e-mail addresses in the first column, or with columns firstname;infix;lastName;email;userGroups (userGroups are the user group labels separated by a ,)
         * @param {string} companyId Company ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUsers: async (companyId: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('importUsers', 'companyId', companyId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('importUsers', 'file', file)
            const localVarPath = `/v3/users/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers: async (sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/admin-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies: async (sortField?: 'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created', sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: async (companyId: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listLocations', 'companyId', companyId)
            const localVarPath = `/v3/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMapObjects: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listMapObjects', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listMapObjects', 'mapId', mapId)
            const localVarPath = `/v3/mapobjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaps: async (companyId: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listMaps', 'companyId', companyId)
            const localVarPath = `/v3/maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReportReasons: async (companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReportReasons', 'companyId', companyId)
            const localVarPath = `/v3/report-reasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'details'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports: async (companyId: string, sortField?: 'details', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReports', 'companyId', companyId)
            const localVarPath = `/v3/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {boolean} [allForCompany] Get all for company
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations: async (companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', allForCompany?: boolean, take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReservations', 'companyId', companyId)
            const localVarPath = `/v3/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fromOperator !== undefined) {
                localVarQueryParameter['fromOperator'] = fromOperator;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (allForCompany !== undefined) {
                localVarQueryParameter['allForCompany'] = allForCompany;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seatType'] = seatType;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatTags: async (companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeatTags', 'companyId', companyId)
            const localVarPath = `/v3/seattags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeats: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeats', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listSeats', 'mapId', mapId)
            const localVarPath = `/v3/seats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatsUsage: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeatsUsage', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listSeatsUsage', 'mapId', mapId)
            const localVarPath = `/v3/seats/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeslots: async (companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTimeslots', 'companyId', companyId)
            const localVarPath = `/v3/timeslots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGroups: async (companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUserGroups', 'companyId', companyId)
            const localVarPath = `/v3/usergroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUsers', 'companyId', companyId)
            const localVarPath = `/v3/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (inviteSent !== undefined) {
                localVarQueryParameter['inviteSent'] = inviteSent;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsAdminUser: async (userId: number, clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('loginAsAdminUser', 'userId', userId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('loginAsAdminUser', 'clientId', clientId)
            const localVarPath = `/v3/admin-user/login-as`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout user
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [adminConsent] admin_consent from MS
         * @param {string} [state] State send in step one
         * @param {string} [tenant] Tennant of the admin user (company ID)
         * @param {string} [scope] Scope of the gotten access
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mSAdminCallback: async (adminConsent?: string, state?: string, tenant?: string, scope?: string, error?: string, errorDescription?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/auth/microsoft/adminCallback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (adminConsent !== undefined) {
                localVarQueryParameter['admin_consent'] = adminConsent;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (errorDescription !== undefined) {
                localVarQueryParameter['error_description'] = errorDescription;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] Code from MS
         * @param {string} [state] State send in step one
         * @param {string} [sessionState] State of session - what is difference?
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mSCallback: async (code?: string, state?: string, sessionState?: string, error?: string, errorDescription?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/auth/microsoft/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (sessionState !== undefined) {
                localVarQueryParameter['session_state'] = sessionState;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (errorDescription !== undefined) {
                localVarQueryParameter['error_description'] = errorDescription;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant: async (clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to create reservations for - not used by api but for backwards compatibility
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservation: async (companyId: string, inlineObject8?: InlineObject8, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCompanyReservation', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject8, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post new Reocurring reservation
         * @summary Post new Reocurring reservation
         * @param {string} companyId Company ID to create reservations for - not needed as queried via seat
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservationReocurring: async (companyId: string, inlineObject10?: InlineObject10, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCompanyReservationReocurring', 'companyId', companyId)
            const localVarPath = `/company/{company_id}/recurring-reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject10, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post device token
         * @summary post Device
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevice: async (inlineObject3: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('postDevice', 'inlineObject3', inlineObject3)
            const localVarPath = `/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post new report
         * @summary post report
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReport: async (inlineObject4: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('postReport', 'inlineObject4', inlineObject4)
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} clientId ClientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirToMS: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('redirToMS', 'clientId', clientId)
            const localVarPath = `/v3/auth/microsoft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirToMSAdmin: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/auth/adminMicrosoft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new company
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompany: async (inlineObject5: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject5' is not null or undefined
            assertParamExists('registerCompany', 'inlineObject5', inlineObject5)
            const localVarPath = `/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('requestLogin', 'inlineObject', inlineObject)
            const localVarPath = `/request-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkin for
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCheckIn: async (reservationId: string, inlineObject15?: InlineObject15, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('reservationCheckIn', 'reservationId', reservationId)
            const localVarPath = `/reservation/{reservationId}/checkin`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject15, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkout for
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCheckout: async (reservationId: string, inlineObject16?: InlineObject16, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('reservationCheckout', 'reservationId', reservationId)
            const localVarPath = `/reservation/{reservationId}/checkout`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject16, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} from date
         * @param {string} to date
         * @param {SeatType} seatType seat type
         * @param {string} companyId Company ID
         * @param {string} [locationId] location
         * @param {string} [mapId] map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsStatistics: async (from: string, to: string, seatType: SeatType, companyId: string, locationId?: string, mapId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('reservationsStatistics', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('reservationsStatistics', 'to', to)
            // verify required parameter 'seatType' is not null or undefined
            assertParamExists('reservationsStatistics', 'seatType', seatType)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('reservationsStatistics', 'companyId', companyId)
            const localVarPath = `/v3/reservations/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seatType'] = seatType;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset user\'s password
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (inlineObject1: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('resetPassword', 'inlineObject1', inlineObject1)
            const localVarPath = `/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invitations to multiple users
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendUsersInvitations: async (inlineObject13: InlineObject13, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject13' is not null or undefined
            assertParamExists('sendUsersInvitations', 'inlineObject13', inlineObject13)
            const localVarPath = `/v3/users/send-invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject13, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {AdminUserUpdate} adminUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminUser: async (userId: number, adminUserUpdate: AdminUserUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAdminUser', 'userId', userId)
            // verify required parameter 'adminUserUpdate' is not null or undefined
            assertParamExists('updateAdminUser', 'adminUserUpdate', adminUserUpdate)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {CompanyProperties} companyProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany: async (companyId: string, companyProperties: CompanyProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCompany', 'companyId', companyId)
            // verify required parameter 'companyProperties' is not null or undefined
            assertParamExists('updateCompany', 'companyProperties', companyProperties)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {LocationProperties} locationProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (locationId: string, locationProperties: LocationProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('updateLocation', 'locationId', locationId)
            // verify required parameter 'locationProperties' is not null or undefined
            assertParamExists('updateLocation', 'locationProperties', locationProperties)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {MapProperties} mapProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap: async (mapId: string, mapProperties: MapProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('updateMap', 'mapId', mapId)
            // verify required parameter 'mapProperties' is not null or undefined
            assertParamExists('updateMap', 'mapProperties', mapProperties)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectProperties} mapObjectProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMapObject: async (mapObjectId: string, mapObjectProperties: MapObjectProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('updateMapObject', 'mapObjectId', mapObjectId)
            // verify required parameter 'mapObjectProperties' is not null or undefined
            assertParamExists('updateMapObject', 'mapObjectProperties', mapObjectProperties)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapObjectProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMe: async (inlineObject6: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('updateMe', 'inlineObject6', inlineObject6)
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user\'s password
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (inlineObject2: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject2' is not null or undefined
            assertParamExists('updatePassword', 'inlineObject2', inlineObject2)
            const localVarPath = `/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {ReservationUpdateReoccurring} reservationUpdateReoccurring 
         * @param {string} [fromReservationId] Update this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReoccurringReservation: async (reoccurReferenceId: string, reservationUpdateReoccurring: ReservationUpdateReoccurring, fromReservationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reoccurReferenceId' is not null or undefined
            assertParamExists('updateReoccurringReservation', 'reoccurReferenceId', reoccurReferenceId)
            // verify required parameter 'reservationUpdateReoccurring' is not null or undefined
            assertParamExists('updateReoccurringReservation', 'reservationUpdateReoccurring', reservationUpdateReoccurring)
            const localVarPath = `/v3/reservation/reoccurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reoccurReferenceId !== undefined) {
                localVarQueryParameter['reoccurReferenceId'] = reoccurReferenceId;
            }

            if (fromReservationId !== undefined) {
                localVarQueryParameter['fromReservationId'] = fromReservationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationUpdateReoccurring, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {ReportReasonProperties} reportReasonProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportReason: async (reportReasonId: string, reportReasonProperties: ReportReasonProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('updateReportReason', 'reportReasonId', reportReasonId)
            // verify required parameter 'reportReasonProperties' is not null or undefined
            assertParamExists('updateReportReason', 'reportReasonProperties', reportReasonProperties)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportReasonProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update reservation
         * @summary Updatereservation
         * @param {string} reservationId reservation_id to update
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (reservationId: string, inlineObject9?: InlineObject9, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation', 'reservationId', reservationId)
            const localVarPath = `/v2/reservation/{reservation_id}`
                .replace(`{${"reservation_id"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject9, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {ReservationUpdate} reservationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation_1: async (reservationId: string, reservationUpdate: ReservationUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation_1', 'reservationId', reservationId)
            // verify required parameter 'reservationUpdate' is not null or undefined
            assertParamExists('updateReservation_1', 'reservationUpdate', reservationUpdate)
            const localVarPath = `/v3/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reservationId !== undefined) {
                localVarQueryParameter['reservationId'] = reservationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeat: async (seatId: string, seatUpdate: SeatUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('updateSeat', 'seatId', seatId)
            // verify required parameter 'seatUpdate' is not null or undefined
            assertParamExists('updateSeat', 'seatUpdate', seatUpdate)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {SeatTagProperties} seatTagProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatTag: async (tagId: string, seatTagProperties: SeatTagProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('updateSeatTag', 'tagId', tagId)
            // verify required parameter 'seatTagProperties' is not null or undefined
            assertParamExists('updateSeatTag', 'seatTagProperties', seatTagProperties)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatTagProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {TimeslotProperties} timeslotProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeslot: async (timeslotId: string, timeslotProperties: TimeslotProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('updateTimeslot', 'timeslotId', timeslotId)
            // verify required parameter 'timeslotProperties' is not null or undefined
            assertParamExists('updateTimeslot', 'timeslotProperties', timeslotProperties)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timeslotProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdate: UserUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUser', 'userUpdate', userUpdate)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {UserGroupProperties} userGroupProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroup: async (groupId: string, userGroupProperties: UserGroupProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateUserGroup', 'groupId', groupId)
            // verify required parameter 'userGroupProperties' is not null or undefined
            assertParamExists('updateUserGroup', 'userGroupProperties', userGroupProperties)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userGroupProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Client compatibility
         * @param {string} clientId The oAuth client identifier
         * @param {string} version The current version of the client application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3CompatibilityGet: async (clientId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('v3CompatibilityGet', 'clientId', clientId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('v3CompatibilityGet', 'version', version)
            const localVarPath = `/v3/compatibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AdminUserCreate} adminUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdminUser(adminUserCreate: AdminUserCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdminUser(adminUserCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CompanyWithoutId} companyWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCompany(companyWithoutId: CompanyWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCompany(companyWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a favorite user
         * @param {FavoriteUserWithoutId} favoriteUserWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFavoriteUser(favoriteUserWithoutId: FavoriteUserWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFavoriteUser(favoriteUserWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLocation(locationWithoutId: LocationWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20026>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLocation(locationWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MapWithoutId} mapWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMap(mapWithoutId: MapWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMap(mapWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMapFile(mapId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMapFile(mapId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MapObjectWithoutId} mapObjectWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMapObject(mapObjectWithoutId: MapObjectWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20029>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMapObject(mapObjectWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOriginalMapFile(mapId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOriginalMapFile(mapId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProfileImage(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProfileImage(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReportReasonWithoutId} reportReasonWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReportReason(reportReasonWithoutId: ReportReasonWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addReportReason(reportReasonWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReservationAdd} reservationAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReservation(reservationAdd: ReservationAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20045>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addReservation(reservationAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeatWithoutId} seatWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSeat(seatWithoutId: SeatWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20033>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSeat(seatWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeatTagWithoutId} seatTagWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSeatTag(seatTagWithoutId: SeatTagWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20036>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSeatTag(seatTagWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TimeslotWithoutId} timeslotWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeslot(timeslotWithoutId: TimeslotWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeslot(timeslotWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userCreate: UserCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserGroupWithoutId} userGroupWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserGroup(userGroupWithoutId: UserGroupWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20039>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserGroup(userGroupWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint to test if a reservation with the provided properties is allowed to be created
         * @param {ReservationCanCreate} reservationCanCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async canCreateReservation(reservationCanCreate: ReservationCanCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20046>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.canCreateReservation(reservationCanCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReservation(inlineObject17: InlineObject17, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReservation(inlineObject17, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminUser(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a favorite user
         * @param {string} favoriteUserId ID of the other user to remove from favorites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFavoriteUser(favoriteUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFavoriteUser(favoriteUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocation(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMap(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMap(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMapObject(mapObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMapObject(mapObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {string} [fromReservationId] Delete this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReoccurringReservation(reoccurReferenceId: string, fromReservationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReoccurringReservation(reoccurReferenceId, fromReservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReportReason(reportReasonId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReportReason(reportReasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservation(reservationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservation(reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Reservation
         * @summary Delete Reservation
         * @param {string} reservationId Reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservationForApp(reservationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservationForApp(reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeat(seatId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeat(seatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeatTag(tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeatTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeslot(timeslotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeslot(timeslotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdminUserEmails(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAdminUserEmails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportCompanyUserCount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportCompanyUserCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * throw api error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async failGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.failGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminUser(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany4App(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany4App(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [locationId] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyReservations(companyId: string, from?: string, to?: string, locationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyReservations(companyId, from, to, locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} [seatType] Deprecated, use seatStatistics instead
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationStats(locationId: string, date: string, from: string, to: string, seatType?: 'desk' | 'lunch' | 'meeting', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationStats(locationId, date, from, to, seatType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMap(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMap(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapImage(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapImage(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapImageUrl(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapImageUrl(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapObject(mapObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapObject(mapObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeUser | MeAdmin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyReservations(companyId?: string, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyReservations(companyId, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOriginalMapImageUrl(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOriginalMapImageUrl(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportReason(reportReasonId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportReason(reportReasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeat(seatId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20032>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeat(seatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeatTag(tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20035>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeatTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeslot(timeslotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20041>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeslot(timeslotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20022>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20038>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import users by uploading a CSV (; as delimiter) containing e-mail addresses in the first column, or with columns firstname;infix;lastName;email;userGroups (userGroups are the user group labels separated by a ,)
         * @param {string} companyId Company ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importUsers(companyId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importUsers(companyId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanies(sortField?: 'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created', sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanies(sortField, sortDirection, filter, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocations(companyId: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocations(companyId, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMapObjects(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20027>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMapObjects(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMaps(companyId: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMaps(companyId, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReportReasons(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'details'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReports(companyId: string, sortField?: 'details', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReports(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {boolean} [allForCompany] Get all for company
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', allForCompany?: boolean, take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20048>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReservations(companyId, sortField, sortDirection, filter, fromOperator, allForCompany, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20034>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeatTags(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeats(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20030>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeats(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeatsUsage(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20031>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeatsUsage(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20040>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeslots(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserGroups(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAsAdminUser(userId: number, clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAsAdminUser(userId, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Logout user
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [adminConsent] admin_consent from MS
         * @param {string} [state] State send in step one
         * @param {string} [tenant] Tennant of the admin user (company ID)
         * @param {string} [scope] Scope of the gotten access
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mSAdminCallback(adminConsent?: string, state?: string, tenant?: string, scope?: string, error?: string, errorDescription?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mSAdminCallback(adminConsent, state, tenant, scope, error, errorDescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [code] Code from MS
         * @param {string} [state] State send in step one
         * @param {string} [sessionState] State of session - what is difference?
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mSCallback(code?: string, state?: string, sessionState?: string, error?: string, errorDescription?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mSCallback(code, state, sessionState, error, errorDescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthPasswordGrantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to create reservations for - not used by api but for backwards compatibility
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompanyReservation(companyId: string, inlineObject8?: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyReservation(companyId, inlineObject8, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post new Reocurring reservation
         * @summary Post new Reocurring reservation
         * @param {string} companyId Company ID to create reservations for - not needed as queried via seat
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompanyReservationReocurring(companyId: string, inlineObject10?: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyReservationReocurring(companyId, inlineObject10, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post device token
         * @summary post Device
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDevice(inlineObject3: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDevice(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post new report
         * @summary post report
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReport(inlineObject4: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReport(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} clientId ClientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirToMS(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirToMS(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirToMSAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20050>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirToMSAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a new company
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCompany(inlineObject5: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCompany(inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestLogin(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestLogin(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkin for
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationCheckIn(reservationId: string, inlineObject15?: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20043>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationCheckIn(reservationId, inlineObject15, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkout for
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationCheckout(reservationId: string, inlineObject16?: InlineObject16, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationCheckout(reservationId, inlineObject16, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} from date
         * @param {string} to date
         * @param {SeatType} seatType seat type
         * @param {string} companyId Company ID
         * @param {string} [locationId] location
         * @param {string} [mapId] map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsStatistics(from: string, to: string, seatType: SeatType, companyId: string, locationId?: string, mapId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20049>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsStatistics(from, to, seatType, companyId, locationId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reset user\'s password
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send invitations to multiple users
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendUsersInvitations(inlineObject13: InlineObject13, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendUsersInvitations(inlineObject13, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {AdminUserUpdate} adminUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdminUser(userId: number, adminUserUpdate: AdminUserUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdminUser(userId, adminUserUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {CompanyProperties} companyProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany(companyId: string, companyProperties: CompanyProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(companyId, companyProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {LocationProperties} locationProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(locationId: string, locationProperties: LocationProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(locationId, locationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {MapProperties} mapProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMap(mapId: string, mapProperties: MapProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMap(mapId, mapProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectProperties} mapObjectProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMapObject(mapObjectId: string, mapObjectProperties: MapObjectProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20029>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMapObject(mapObjectId, mapObjectProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMe(inlineObject6: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMe(inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user\'s password
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(inlineObject2: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {ReservationUpdateReoccurring} reservationUpdateReoccurring 
         * @param {string} [fromReservationId] Update this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReoccurringReservation(reoccurReferenceId: string, reservationUpdateReoccurring: ReservationUpdateReoccurring, fromReservationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20047>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReoccurringReservation(reoccurReferenceId, reservationUpdateReoccurring, fromReservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {ReportReasonProperties} reportReasonProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReportReason(reportReasonId: string, reportReasonProperties: ReportReasonProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReportReason(reportReasonId, reportReasonProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update reservation
         * @summary Updatereservation
         * @param {string} reservationId reservation_id to update
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(reservationId: string, inlineObject9?: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(reservationId, inlineObject9, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {ReservationUpdate} reservationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation_1(reservationId: string, reservationUpdate: ReservationUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20044>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation_1(reservationId, reservationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20033>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeat(seatId, seatUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {SeatTagProperties} seatTagProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeatTag(tagId: string, seatTagProperties: SeatTagProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20036>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeatTag(tagId, seatTagProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {TimeslotProperties} timeslotProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeslot(timeslotId: string, timeslotProperties: TimeslotProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeslot(timeslotId, timeslotProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userUpdate: UserUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {UserGroupProperties} userGroupProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserGroup(groupId: string, userGroupProperties: UserGroupProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20039>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserGroup(groupId, userGroupProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Client compatibility
         * @param {string} clientId The oAuth client identifier
         * @param {string} version The current version of the client application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3CompatibilityGet(clientId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v3CompatibilityGet(clientId, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminUserCreate} adminUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdminUser(adminUserCreate: AdminUserCreate, options?: any): AxiosPromise<InlineResponse20019> {
            return localVarFp.addAdminUser(adminUserCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompanyWithoutId} companyWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany(companyWithoutId: CompanyWithoutId, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.addCompany(companyWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a favorite user
         * @param {FavoriteUserWithoutId} favoriteUserWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFavoriteUser(favoriteUserWithoutId: FavoriteUserWithoutId, options?: any): AxiosPromise<void> {
            return localVarFp.addFavoriteUser(favoriteUserWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation(locationWithoutId: LocationWithoutId, options?: any): AxiosPromise<InlineResponse20026> {
            return localVarFp.addLocation(locationWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MapWithoutId} mapWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMap(mapWithoutId: MapWithoutId, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.addMap(mapWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapFile(mapId: string, file: any, options?: any): AxiosPromise<void> {
            return localVarFp.addMapFile(mapId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MapObjectWithoutId} mapObjectWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapObject(mapObjectWithoutId: MapObjectWithoutId, options?: any): AxiosPromise<InlineResponse20029> {
            return localVarFp.addMapObject(mapObjectWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOriginalMapFile(mapId: string, file: any, options?: any): AxiosPromise<void> {
            return localVarFp.addOriginalMapFile(mapId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProfileImage(file: any, options?: any): AxiosPromise<void> {
            return localVarFp.addProfileImage(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReportReasonWithoutId} reportReasonWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportReason(reportReasonWithoutId: ReportReasonWithoutId, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.addReportReason(reportReasonWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReservationAdd} reservationAdd 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReservation(reservationAdd: ReservationAdd, options?: any): AxiosPromise<InlineResponse20045> {
            return localVarFp.addReservation(reservationAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeatWithoutId} seatWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeat(seatWithoutId: SeatWithoutId, options?: any): AxiosPromise<InlineResponse20033> {
            return localVarFp.addSeat(seatWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeatTagWithoutId} seatTagWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeatTag(seatTagWithoutId: SeatTagWithoutId, options?: any): AxiosPromise<InlineResponse20036> {
            return localVarFp.addSeatTag(seatTagWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TimeslotWithoutId} timeslotWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeslot(timeslotWithoutId: TimeslotWithoutId, options?: any): AxiosPromise<InlineResponse20042> {
            return localVarFp.addTimeslot(timeslotWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userCreate: UserCreate, options?: any): AxiosPromise<InlineResponse20023> {
            return localVarFp.addUser(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserGroupWithoutId} userGroupWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserGroup(userGroupWithoutId: UserGroupWithoutId, options?: any): AxiosPromise<InlineResponse20039> {
            return localVarFp.addUserGroup(userGroupWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to test if a reservation with the provided properties is allowed to be created
         * @param {ReservationCanCreate} reservationCanCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canCreateReservation(reservationCanCreate: ReservationCanCreate, options?: any): AxiosPromise<InlineResponse20046> {
            return localVarFp.canCreateReservation(reservationCanCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation(inlineObject17: InlineObject17, options?: any): AxiosPromise<void> {
            return localVarFp.cancelReservation(inlineObject17, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminUser(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAdminUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany(companyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a favorite user
         * @param {string} favoriteUserId ID of the other user to remove from favorites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFavoriteUser(favoriteUserId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFavoriteUser(favoriteUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation(locationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMap(mapId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMap(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapObject(mapObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMapObject(mapObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {string} [fromReservationId] Delete this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReoccurringReservation(reoccurReferenceId: string, fromReservationId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReoccurringReservation(reoccurReferenceId, fromReservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportReason(reportReasonId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReportReason(reportReasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReservation(reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Reservation
         * @summary Delete Reservation
         * @param {string} reservationId Reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservationForApp(reservationId: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteReservationForApp(reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeat(seatId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSeat(seatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatTag(tagId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSeatTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeslot(timeslotId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTimeslot(timeslotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroup(groupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdminUserEmails(options?: any): AxiosPromise<any> {
            return localVarFp.exportAdminUserEmails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCompanyUserCount(options?: any): AxiosPromise<any> {
            return localVarFp.exportCompanyUserCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any): AxiosPromise<any> {
            return localVarFp.exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options).then((request) => request(axios, basePath));
        },
        /**
         * throw api error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        failGet(options?: any): AxiosPromise<void> {
            return localVarFp.failGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminUser(userId: number, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.getAdminUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(companyId: string, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.getCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany4App(companyId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getCompany4App(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [locationId] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations(companyId: string, from?: string, to?: string, locationId?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getCompanyReservations(companyId, from, to, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(locationId: string, options?: any): AxiosPromise<InlineResponse20025> {
            return localVarFp.getLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} [seatType] Deprecated, use seatStatistics instead
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats(locationId: string, date: string, from: string, to: string, seatType?: 'desk' | 'lunch' | 'meeting', options?: any): AxiosPromise<object> {
            return localVarFp.getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(mapId: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getMap(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapImage(mapId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getMapImage(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapImageUrl(mapId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getMapImageUrl(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapObject(mapObjectId: string, options?: any): AxiosPromise<InlineResponse20028> {
            return localVarFp.getMapObject(mapObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<MeUser | MeAdmin> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations(companyId?: string, from?: string, to?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getMyReservations(companyId, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOriginalMapImageUrl(mapId: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getOriginalMapImageUrl(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(reportId: string, options?: any): AxiosPromise<InlineResponse20016> {
            return localVarFp.getReport(reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportReason(reportReasonId: string, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.getReportReason(reportReasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeat(seatId: string, options?: any): AxiosPromise<InlineResponse20032> {
            return localVarFp.getSeat(seatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatTag(tagId: string, options?: any): AxiosPromise<InlineResponse20035> {
            return localVarFp.getSeatTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeslot(timeslotId: string, options?: any): AxiosPromise<InlineResponse20041> {
            return localVarFp.getTimeslot(timeslotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<InlineResponse20022> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroup(groupId: string, options?: any): AxiosPromise<InlineResponse20038> {
            return localVarFp.getUserGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Import users by uploading a CSV (; as delimiter) containing e-mail addresses in the first column, or with columns firstname;infix;lastName;email;userGroups (userGroups are the user group labels separated by a ,)
         * @param {string} companyId Company ID
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUsers(companyId: string, file: any, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.importUsers(companyId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20017> {
            return localVarFp.listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies(sortField?: 'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created', sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.listCompanies(sortField, sortDirection, filter, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(companyId: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20024> {
            return localVarFp.listLocations(companyId, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMapObjects(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20027> {
            return localVarFp.listMapObjects(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaps(companyId: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.listMaps(companyId, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.listReportReasons(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'details'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports(companyId: string, sortField?: 'details', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.listReports(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
         * @param {boolean} [allForCompany] Get all for company
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [userId] User ID
         * @param {ReservationStatus} [status] ReservationStatus
         * @param {string} [locationId] ReservationLocationId
         * @param {string} [mapId] ReservationMapId
         * @param {SeatType} [seatType] ReservationSeatType
         * @param {ReservationType} [type] ReservationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', allForCompany?: boolean, take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any): AxiosPromise<InlineResponse20048> {
            return localVarFp.listReservations(companyId, sortField, sortDirection, filter, fromOperator, allForCompany, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20034> {
            return localVarFp.listSeatTags(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeats(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20030> {
            return localVarFp.listSeats(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatsUsage(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20031> {
            return localVarFp.listSeatsUsage(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20040> {
            return localVarFp.listTimeslots(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20037> {
            return localVarFp.listUserGroups(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20021> {
            return localVarFp.listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsAdminUser(userId: number, clientId: string, options?: any): AxiosPromise<InlineResponse20020> {
            return localVarFp.loginAsAdminUser(userId, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout user
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<string> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [adminConsent] admin_consent from MS
         * @param {string} [state] State send in step one
         * @param {string} [tenant] Tennant of the admin user (company ID)
         * @param {string} [scope] Scope of the gotten access
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mSAdminCallback(adminConsent?: string, state?: string, tenant?: string, scope?: string, error?: string, errorDescription?: string, options?: any): AxiosPromise<void> {
            return localVarFp.mSAdminCallback(adminConsent, state, tenant, scope, error, errorDescription, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [code] Code from MS
         * @param {string} [state] State send in step one
         * @param {string} [sessionState] State of session - what is difference?
         * @param {string} [error] MS error Code
         * @param {string} [errorDescription] error description by microsoft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mSCallback(code?: string, state?: string, sessionState?: string, error?: string, errorDescription?: string, options?: any): AxiosPromise<void> {
            return localVarFp.mSCallback(code, state, sessionState, error, errorDescription, options).then((request) => request(axios, basePath));
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(options?: any): AxiosPromise<void> {
            return localVarFp.metricsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuthPasswordGrantResponse> {
            return localVarFp.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to create reservations for - not used by api but for backwards compatibility
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservation(companyId: string, inlineObject8?: InlineObject8, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.postCompanyReservation(companyId, inlineObject8, options).then((request) => request(axios, basePath));
        },
        /**
         * Post new Reocurring reservation
         * @summary Post new Reocurring reservation
         * @param {string} companyId Company ID to create reservations for - not needed as queried via seat
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservationReocurring(companyId: string, inlineObject10?: InlineObject10, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.postCompanyReservationReocurring(companyId, inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * Post device token
         * @summary post Device
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevice(inlineObject3: InlineObject3, options?: any): AxiosPromise<string> {
            return localVarFp.postDevice(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Post new report
         * @summary post report
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReport(inlineObject4: InlineObject4, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.postReport(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} clientId ClientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirToMS(clientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.redirToMS(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirToMSAdmin(options?: any): AxiosPromise<InlineResponse20050> {
            return localVarFp.redirToMSAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new company
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCompany(inlineObject5: InlineObject5, options?: any): AxiosPromise<void> {
            return localVarFp.registerCompany(inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin(inlineObject: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.requestLogin(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkin for
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCheckIn(reservationId: string, inlineObject15?: InlineObject15, options?: any): AxiosPromise<InlineResponse20043> {
            return localVarFp.reservationCheckIn(reservationId, inlineObject15, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reservationId Reservation ID to checkout for
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCheckout(reservationId: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<void> {
            return localVarFp.reservationCheckout(reservationId, inlineObject16, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} from date
         * @param {string} to date
         * @param {SeatType} seatType seat type
         * @param {string} companyId Company ID
         * @param {string} [locationId] location
         * @param {string} [mapId] map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsStatistics(from: string, to: string, seatType: SeatType, companyId: string, locationId?: string, mapId?: string, options?: any): AxiosPromise<InlineResponse20049> {
            return localVarFp.reservationsStatistics(from, to, seatType, companyId, locationId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset user\'s password
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(inlineObject1: InlineObject1, options?: any): AxiosPromise<void> {
            return localVarFp.resetPassword(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invitations to multiple users
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendUsersInvitations(inlineObject13: InlineObject13, options?: any): AxiosPromise<void> {
            return localVarFp.sendUsersInvitations(inlineObject13, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {AdminUserUpdate} adminUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminUser(userId: number, adminUserUpdate: AdminUserUpdate, options?: any): AxiosPromise<InlineResponse20019> {
            return localVarFp.updateAdminUser(userId, adminUserUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {CompanyProperties} companyProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(companyId: string, companyProperties: CompanyProperties, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.updateCompany(companyId, companyProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {LocationProperties} locationProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(locationId: string, locationProperties: LocationProperties, options?: any): AxiosPromise<object> {
            return localVarFp.updateLocation(locationId, locationProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {MapProperties} mapProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(mapId: string, mapProperties: MapProperties, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.updateMap(mapId, mapProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectProperties} mapObjectProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMapObject(mapObjectId: string, mapObjectProperties: MapObjectProperties, options?: any): AxiosPromise<InlineResponse20029> {
            return localVarFp.updateMapObject(mapObjectId, mapObjectProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMe(inlineObject6: InlineObject6, options?: any): AxiosPromise<string> {
            return localVarFp.updateMe(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user\'s password
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(inlineObject2: InlineObject2, options?: any): AxiosPromise<void> {
            return localVarFp.updatePassword(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update all future reservations with the same reoccurReferenceId
         * @param {string} reoccurReferenceId Reoccur reference ID
         * @param {ReservationUpdateReoccurring} reservationUpdateReoccurring 
         * @param {string} [fromReservationId] Update this reservation and all future reservations from this date with the same reoccurReferenceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReoccurringReservation(reoccurReferenceId: string, reservationUpdateReoccurring: ReservationUpdateReoccurring, fromReservationId?: string, options?: any): AxiosPromise<InlineResponse20047> {
            return localVarFp.updateReoccurringReservation(reoccurReferenceId, reservationUpdateReoccurring, fromReservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {ReportReasonProperties} reportReasonProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportReason(reportReasonId: string, reportReasonProperties: ReportReasonProperties, options?: any): AxiosPromise<InlineResponse20013> {
            return localVarFp.updateReportReason(reportReasonId, reportReasonProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * Update reservation
         * @summary Updatereservation
         * @param {string} reservationId reservation_id to update
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(reservationId: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<void> {
            return localVarFp.updateReservation(reservationId, inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {ReservationUpdate} reservationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation_1(reservationId: string, reservationUpdate: ReservationUpdate, options?: any): AxiosPromise<InlineResponse20044> {
            return localVarFp.updateReservation_1(reservationId, reservationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any): AxiosPromise<InlineResponse20033> {
            return localVarFp.updateSeat(seatId, seatUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {SeatTagProperties} seatTagProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatTag(tagId: string, seatTagProperties: SeatTagProperties, options?: any): AxiosPromise<InlineResponse20036> {
            return localVarFp.updateSeatTag(tagId, seatTagProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {TimeslotProperties} timeslotProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeslot(timeslotId: string, timeslotProperties: TimeslotProperties, options?: any): AxiosPromise<InlineResponse20042> {
            return localVarFp.updateTimeslot(timeslotId, timeslotProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, userUpdate: UserUpdate, options?: any): AxiosPromise<InlineResponse20023> {
            return localVarFp.updateUser(userId, userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {UserGroupProperties} userGroupProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroup(groupId: string, userGroupProperties: UserGroupProperties, options?: any): AxiosPromise<InlineResponse20039> {
            return localVarFp.updateUserGroup(groupId, userGroupProperties, options).then((request) => request(axios, basePath));
        },
        /**
         * Client compatibility
         * @param {string} clientId The oAuth client identifier
         * @param {string} version The current version of the client application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3CompatibilityGet(clientId: string, version: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.v3CompatibilityGet(clientId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AdminUserCreate} adminUserCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdminUser(adminUserCreate: AdminUserCreate, options?: any) {
        return DefaultApiFp(this.configuration).addAdminUser(adminUserCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompanyWithoutId} companyWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCompany(companyWithoutId: CompanyWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addCompany(companyWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a favorite user
     * @param {FavoriteUserWithoutId} favoriteUserWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addFavoriteUser(favoriteUserWithoutId: FavoriteUserWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addFavoriteUser(favoriteUserWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationWithoutId} locationWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addLocation(locationWithoutId: LocationWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addLocation(locationWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MapWithoutId} mapWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMap(mapWithoutId: MapWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addMap(mapWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMapFile(mapId: string, file: any, options?: any) {
        return DefaultApiFp(this.configuration).addMapFile(mapId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MapObjectWithoutId} mapObjectWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMapObject(mapObjectWithoutId: MapObjectWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addMapObject(mapObjectWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addOriginalMapFile(mapId: string, file: any, options?: any) {
        return DefaultApiFp(this.configuration).addOriginalMapFile(mapId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addProfileImage(file: any, options?: any) {
        return DefaultApiFp(this.configuration).addProfileImage(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReportReasonWithoutId} reportReasonWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addReportReason(reportReasonWithoutId: ReportReasonWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addReportReason(reportReasonWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReservationAdd} reservationAdd 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addReservation(reservationAdd: ReservationAdd, options?: any) {
        return DefaultApiFp(this.configuration).addReservation(reservationAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeatWithoutId} seatWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSeat(seatWithoutId: SeatWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addSeat(seatWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeatTagWithoutId} seatTagWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSeatTag(seatTagWithoutId: SeatTagWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addSeatTag(seatTagWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TimeslotWithoutId} timeslotWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTimeslot(timeslotWithoutId: TimeslotWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addTimeslot(timeslotWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(userCreate: UserCreate, options?: any) {
        return DefaultApiFp(this.configuration).addUser(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserGroupWithoutId} userGroupWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUserGroup(userGroupWithoutId: UserGroupWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addUserGroup(userGroupWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to test if a reservation with the provided properties is allowed to be created
     * @param {ReservationCanCreate} reservationCanCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public canCreateReservation(reservationCanCreate: ReservationCanCreate, options?: any) {
        return DefaultApiFp(this.configuration).canCreateReservation(reservationCanCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject17} inlineObject17 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cancelReservation(inlineObject17: InlineObject17, options?: any) {
        return DefaultApiFp(this.configuration).cancelReservation(inlineObject17, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdminUser(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteAdminUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompany(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a favorite user
     * @param {string} favoriteUserId ID of the other user to remove from favorites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFavoriteUser(favoriteUserId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteFavoriteUser(favoriteUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteLocation(locationId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMap(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteMap(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMapObject(mapObjectId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteMapObject(mapObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all future reservations with the same reoccurReferenceId
     * @param {string} reoccurReferenceId Reoccur reference ID
     * @param {string} [fromReservationId] Delete this reservation and all future reservations from this date with the same reoccurReferenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReoccurringReservation(reoccurReferenceId: string, fromReservationId?: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReoccurringReservation(reoccurReferenceId, fromReservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReportReason(reportReasonId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReportReason(reportReasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reservationId Reservation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReservation(reservationId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReservation(reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Reservation
     * @summary Delete Reservation
     * @param {string} reservationId Reservation to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReservationForApp(reservationId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReservationForApp(reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSeat(seatId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSeat(seatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSeatTag(tagId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSeatTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeslot(timeslotId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeslot(timeslotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(userId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserGroup(groupId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUserGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdminUserEmails(options?: any) {
        return DefaultApiFp(this.configuration).exportAdminUserEmails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportCompanyUserCount(options?: any) {
        return DefaultApiFp(this.configuration).exportCompanyUserCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {string} [userId] User ID
     * @param {ReservationStatus} [status] ReservationStatus
     * @param {string} [locationId] ReservationLocationId
     * @param {string} [mapId] ReservationMapId
     * @param {SeatType} [seatType] ReservationSeatType
     * @param {ReservationType} [type] ReservationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any) {
        return DefaultApiFp(this.configuration).exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * throw api error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public failGet(options?: any) {
        return DefaultApiFp(this.configuration).failGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdminUser(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).getAdminUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany4App(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompany4App(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations Company
     * @summary Get reservations for Company
     * @param {string} companyId Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {string} [locationId] LocationId to get reservations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyReservations(companyId: string, from?: string, to?: string, locationId?: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompanyReservations(companyId, from, to, locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLocation(locationId: string, options?: any) {
        return DefaultApiFp(this.configuration).getLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stats for location
     * @summary Get stats for location
     * @param {string} locationId Location ID to get stats for
     * @param {string} date Date to get stats for
     * @param {string} from Start time to get stats for
     * @param {string} to End of time range
     * @param {'desk' | 'lunch' | 'meeting'} [seatType] Deprecated, use seatStatistics instead
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLocationStats(locationId: string, date: string, from: string, to: string, seatType?: 'desk' | 'lunch' | 'meeting', options?: any) {
        return DefaultApiFp(this.configuration).getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMap(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMap(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMapImage(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMapImage(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMapImageUrl(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMapImageUrl(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMapObject(mapObjectId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMapObject(mapObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get requestion user
     * @summary Get  user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMe(options?: any) {
        return DefaultApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations user
     * @summary Get reservations for user
     * @param {string} [companyId] Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyReservations(companyId?: string, from?: string, to?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMyReservations(companyId, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOriginalMapImageUrl(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).getOriginalMapImageUrl(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportId Report ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReport(reportId: string, options?: any) {
        return DefaultApiFp(this.configuration).getReport(reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReportReason(reportReasonId: string, options?: any) {
        return DefaultApiFp(this.configuration).getReportReason(reportReasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSeat(seatId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSeat(seatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSeatTag(tagId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSeatTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeslot(timeslotId: string, options?: any) {
        return DefaultApiFp(this.configuration).getTimeslot(timeslotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(userId: string, options?: any) {
        return DefaultApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserGroup(groupId: string, options?: any) {
        return DefaultApiFp(this.configuration).getUserGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check API health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: any) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import users by uploading a CSV (; as delimiter) containing e-mail addresses in the first column, or with columns firstname;infix;lastName;email;userGroups (userGroups are the user group labels separated by a ,)
     * @param {string} companyId Company ID
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public importUsers(companyId: string, file: any, options?: any) {
        return DefaultApiFp(this.configuration).importUsers(companyId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'email'} [sortField] field to sort on
     * @param {string} [companyId] Company ID, required for company admin, optional for super admin
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCompanies(sortField?: 'name' | 'billingPricePerCustomer' | 'billingStartDate' | 'language' | 'created', sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listCompanies(sortField, sortDirection, filter, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLocations(companyId: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listLocations(companyId, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMapObjects(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listMapObjects(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMaps(companyId: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMaps(companyId, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'reason'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listReportReasons(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'details'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listReports(companyId: string, sortField?: 'details', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listReports(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to apply to the \&#39;from\&#39; field
     * @param {boolean} [allForCompany] Get all for company
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {string} [userId] User ID
     * @param {ReservationStatus} [status] ReservationStatus
     * @param {string} [locationId] ReservationLocationId
     * @param {string} [mapId] ReservationMapId
     * @param {SeatType} [seatType] ReservationSeatType
     * @param {ReservationType} [type] ReservationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'cancelled' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone' | 'user.firstName' | 'user.lastName' | 'user.email' | 'location.name' | 'map.name' | 'seat.name', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', allForCompany?: boolean, take?: number, skip?: number, from?: string, to?: string, userId?: string, status?: ReservationStatus, locationId?: string, mapId?: string, seatType?: SeatType, type?: ReservationType, options?: any) {
        return DefaultApiFp(this.configuration).listReservations(companyId, sortField, sortDirection, filter, fromOperator, allForCompany, take, skip, from, to, userId, status, locationId, mapId, seatType, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'label'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSeatTags(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeats(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listSeats(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeatsUsage(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listSeatsUsage(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'name' | 'from' | 'to'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listTimeslots(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'label'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listUserGroups(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
     * @param {boolean} [inviteSent] filter on whether an invite has been sent
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {string} clientId Client ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginAsAdminUser(userId: number, clientId: string, options?: any) {
        return DefaultApiFp(this.configuration).loginAsAdminUser(userId, clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout user
     * @summary logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: any) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [adminConsent] admin_consent from MS
     * @param {string} [state] State send in step one
     * @param {string} [tenant] Tennant of the admin user (company ID)
     * @param {string} [scope] Scope of the gotten access
     * @param {string} [error] MS error Code
     * @param {string} [errorDescription] error description by microsoft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mSAdminCallback(adminConsent?: string, state?: string, tenant?: string, scope?: string, error?: string, errorDescription?: string, options?: any) {
        return DefaultApiFp(this.configuration).mSAdminCallback(adminConsent, state, tenant, scope, error, errorDescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [code] Code from MS
     * @param {string} [state] State send in step one
     * @param {string} [sessionState] State of session - what is difference?
     * @param {string} [error] MS error Code
     * @param {string} [errorDescription] error description by microsoft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mSCallback(code?: string, state?: string, sessionState?: string, error?: string, errorDescription?: string, options?: any) {
        return DefaultApiFp(this.configuration).mSCallback(code, state, sessionState, error, errorDescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Basic API metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsGet(options?: any) {
        return DefaultApiFp(this.configuration).metricsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * oAuth routes, eg password grant or refresh
     * @summary Oauth password grant
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {string} [refreshToken] 
     * @param {string} [grantType] 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any) {
        return DefaultApiFp(this.configuration).oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post new reservation
     * @summary Post new reservation
     * @param {string} companyId Company ID to create reservations for - not used by api but for backwards compatibility
     * @param {InlineObject8} [inlineObject8] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCompanyReservation(companyId: string, inlineObject8?: InlineObject8, options?: any) {
        return DefaultApiFp(this.configuration).postCompanyReservation(companyId, inlineObject8, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post new Reocurring reservation
     * @summary Post new Reocurring reservation
     * @param {string} companyId Company ID to create reservations for - not needed as queried via seat
     * @param {InlineObject10} [inlineObject10] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCompanyReservationReocurring(companyId: string, inlineObject10?: InlineObject10, options?: any) {
        return DefaultApiFp(this.configuration).postCompanyReservationReocurring(companyId, inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post device token
     * @summary post Device
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDevice(inlineObject3: InlineObject3, options?: any) {
        return DefaultApiFp(this.configuration).postDevice(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post new report
     * @summary post report
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postReport(inlineObject4: InlineObject4, options?: any) {
        return DefaultApiFp(this.configuration).postReport(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} clientId ClientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public redirToMS(clientId: string, options?: any) {
        return DefaultApiFp(this.configuration).redirToMS(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public redirToMSAdmin(options?: any) {
        return DefaultApiFp(this.configuration).redirToMSAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new company
     * @param {InlineObject5} inlineObject5 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerCompany(inlineObject5: InlineObject5, options?: any) {
        return DefaultApiFp(this.configuration).registerCompany(inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request login by post\'ing email for user
     * @summary Request Login
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestLogin(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).requestLogin(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reservationId Reservation ID to checkin for
     * @param {InlineObject15} [inlineObject15] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reservationCheckIn(reservationId: string, inlineObject15?: InlineObject15, options?: any) {
        return DefaultApiFp(this.configuration).reservationCheckIn(reservationId, inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reservationId Reservation ID to checkout for
     * @param {InlineObject16} [inlineObject16] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reservationCheckout(reservationId: string, inlineObject16?: InlineObject16, options?: any) {
        return DefaultApiFp(this.configuration).reservationCheckout(reservationId, inlineObject16, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} from date
     * @param {string} to date
     * @param {SeatType} seatType seat type
     * @param {string} companyId Company ID
     * @param {string} [locationId] location
     * @param {string} [mapId] map
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reservationsStatistics(from: string, to: string, seatType: SeatType, companyId: string, locationId?: string, mapId?: string, options?: any) {
        return DefaultApiFp(this.configuration).reservationsStatistics(from, to, seatType, companyId, locationId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset user\'s password
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPassword(inlineObject1: InlineObject1, options?: any) {
        return DefaultApiFp(this.configuration).resetPassword(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invitations to multiple users
     * @param {InlineObject13} inlineObject13 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendUsersInvitations(inlineObject13: InlineObject13, options?: any) {
        return DefaultApiFp(this.configuration).sendUsersInvitations(inlineObject13, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {AdminUserUpdate} adminUserUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdminUser(userId: number, adminUserUpdate: AdminUserUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateAdminUser(userId, adminUserUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {CompanyProperties} companyProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCompany(companyId: string, companyProperties: CompanyProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateCompany(companyId, companyProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {LocationProperties} locationProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateLocation(locationId: string, locationProperties: LocationProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateLocation(locationId, locationProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {MapProperties} mapProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMap(mapId: string, mapProperties: MapProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateMap(mapId, mapProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {MapObjectProperties} mapObjectProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMapObject(mapObjectId: string, mapObjectProperties: MapObjectProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateMapObject(mapObjectId, mapObjectProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject6} inlineObject6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMe(inlineObject6: InlineObject6, options?: any) {
        return DefaultApiFp(this.configuration).updateMe(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user\'s password
     * @param {InlineObject2} inlineObject2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePassword(inlineObject2: InlineObject2, options?: any) {
        return DefaultApiFp(this.configuration).updatePassword(inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update all future reservations with the same reoccurReferenceId
     * @param {string} reoccurReferenceId Reoccur reference ID
     * @param {ReservationUpdateReoccurring} reservationUpdateReoccurring 
     * @param {string} [fromReservationId] Update this reservation and all future reservations from this date with the same reoccurReferenceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReoccurringReservation(reoccurReferenceId: string, reservationUpdateReoccurring: ReservationUpdateReoccurring, fromReservationId?: string, options?: any) {
        return DefaultApiFp(this.configuration).updateReoccurringReservation(reoccurReferenceId, reservationUpdateReoccurring, fromReservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {ReportReasonProperties} reportReasonProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReportReason(reportReasonId: string, reportReasonProperties: ReportReasonProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateReportReason(reportReasonId, reportReasonProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update reservation
     * @summary Updatereservation
     * @param {string} reservationId reservation_id to update
     * @param {InlineObject9} [inlineObject9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReservation(reservationId: string, inlineObject9?: InlineObject9, options?: any) {
        return DefaultApiFp(this.configuration).updateReservation(reservationId, inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reservationId Reservation ID
     * @param {ReservationUpdate} reservationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReservation_1(reservationId: string, reservationUpdate: ReservationUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateReservation_1(reservationId, reservationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {SeatUpdate} seatUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateSeat(seatId, seatUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {SeatTagProperties} seatTagProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSeatTag(tagId: string, seatTagProperties: SeatTagProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateSeatTag(tagId, seatTagProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {TimeslotProperties} timeslotProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTimeslot(timeslotId: string, timeslotProperties: TimeslotProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateTimeslot(timeslotId, timeslotProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(userId: string, userUpdate: UserUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateUser(userId, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {UserGroupProperties} userGroupProperties 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserGroup(groupId: string, userGroupProperties: UserGroupProperties, options?: any) {
        return DefaultApiFp(this.configuration).updateUserGroup(groupId, userGroupProperties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Client compatibility
     * @param {string} clientId The oAuth client identifier
     * @param {string} version The current version of the client application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v3CompatibilityGet(clientId: string, version: string, options?: any) {
        return DefaultApiFp(this.configuration).v3CompatibilityGet(clientId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public versionGet(options?: any) {
        return DefaultApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}


