/* tslint:disable */
/* eslint-disable */
/**
 * BookMyDesk API with Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    token_type: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse2002Items>}
     * @memberof InlineResponse2002
     */
    items: Array<InlineResponse2002Items>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Items
 */
export interface InlineResponse2002Items {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Items
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Items
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Items
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Items
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Items
     */
    email: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002Items
     */
    roles: Array<string>;
}
/**
 * 
 * @export
 * @interface MeAdmin
 */
export interface MeAdmin {
    /**
     * 
     * @type {number}
     * @memberof MeAdmin
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    lastName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    roles: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    companyIds: Array<string>;
}
/**
 * 
 * @export
 * @interface MeUser
 */
export interface MeUser {
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    first_name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    last_name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    language: string;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    location_tracking_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    privacy_mode_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    push_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    check_in_push_enabled: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof MeUser
     */
    companies: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof MeUser
     */
    userGroups: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeUser
     */
    open_check_ins: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations: async (companyId: string, from?: string, to?: string, location?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyReservations', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats: async (locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocationStats', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getLocationStats', 'date', date)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getLocationStats', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getLocationStats', 'to', to)
            // verify required parameter 'seatType' is not null or undefined
            assertParamExists('getLocationStats', 'seatType', seatType)
            const localVarPath = `/v2/location/{location_id}/stats`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seat_type'] = seatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations: async (companyId?: string, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers: async (companyId: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listAdminUsers', 'companyId', companyId)
            const localVarPath = `/v2/admin-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant: async (clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('requestLogin', 'inlineObject', inlineObject)
            const localVarPath = `/request-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyReservations(companyId, from, to, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationStats(locationId, date, from, to, seatType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeUser | MeAdmin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyReservations(companyId?: string, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyReservations(companyId, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdminUsers(companyId: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdminUsers(companyId, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestLogin(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestLogin(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(companyId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getCompanyReservations(companyId, from, to, location, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any): AxiosPromise<object> {
            return localVarFp.getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<MeUser | MeAdmin> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations(companyId?: string, from?: string, to?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getMyReservations(companyId, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers(companyId: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listAdminUsers(companyId, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(options?: any): AxiosPromise<void> {
            return localVarFp.metricsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin(inlineObject: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.requestLogin(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} companyId Company ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations Company
     * @summary Get reservations for Company
     * @param {string} companyId Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {string} [location] LocationId to get reservations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompanyReservations(companyId, from, to, location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stats for location
     * @summary Get stats for location
     * @param {string} locationId Location ID to get stats for
     * @param {string} date Date to get stats for
     * @param {string} from Start time to get stats for
     * @param {string} to End of time range
     * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any) {
        return DefaultApiFp(this.configuration).getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get requestion user
     * @summary Get  user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMe(options?: any) {
        return DefaultApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations user
     * @summary Get reservations for user
     * @param {string} [companyId] Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyReservations(companyId?: string, from?: string, to?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMyReservations(companyId, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check API health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: any) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdminUsers(companyId: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAdminUsers(companyId, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Basic API metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsGet(options?: any) {
        return DefaultApiFp(this.configuration).metricsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * oAuth routes, eg password grant or refresh
     * @summary Oauth password grant
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {string} [refreshToken] 
     * @param {string} [grantType] 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any) {
        return DefaultApiFp(this.configuration).oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request login by post\'ing email for user
     * @summary Request Login
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestLogin(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).requestLogin(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public versionGet(options?: any) {
        return DefaultApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}


