/* tslint:disable */
/* eslint-disable */
/**
 * BookMyDesk API with Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */
export enum BillingType {
    Enterpise = 'enterpise',
    None = 'none',
    Free = 'free',
    Year = 'year',
    Month = 'month'
}

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    seat_id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    date: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject1
     */
    include_parking?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    type: InlineObject1TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    visitor_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    visitor_email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    visitor_phone?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject1TypeEnum {
    Normal = 'normal',
    Visitor = 'visitor'
}

/**
 * 
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject10
     */
    newsletter: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject10
     */
    companyId: string;
}
/**
 * 
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject11
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject11
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject11
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject11
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject11
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject11
     */
    newsletter?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject12
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject12
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject12
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject12
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject12
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject12
     */
    newsletter: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject13
     */
    name?: string;
    /**
     * 
     * @type {V3LocationAddress}
     * @memberof InlineObject13
     */
    address?: V3LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof InlineObject13
     */
    parkingCount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject13
     */
    contactEmail?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject13
     */
    bookingLimit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject13
     */
    visible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineObject13
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface InlineObject14
 */
export interface InlineObject14 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject14
     */
    label?: string;
}
/**
 * 
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject15
     */
    label: string;
}
/**
 * 
 * @export
 * @interface InlineObject16
 */
export interface InlineObject16 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject16
     */
    label?: string;
}
/**
 * 
 * @export
 * @interface InlineObject17
 */
export interface InlineObject17 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject17
     */
    label: string;
}
/**
 * 
 * @export
 * @interface InlineObject18
 */
export interface InlineObject18 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject18
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject18
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject18
     */
    to?: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof InlineObject18
     */
    type?: TimeslotType;
}
/**
 * 
 * @export
 * @interface InlineObject19
 */
export interface InlineObject19 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject19
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject19
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject19
     */
    to: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof InlineObject19
     */
    type: TimeslotType;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject3
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    originalImage?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    originalImageScale?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    locationId?: string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject4
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    image: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    originalImage?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    originalImageScale?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    locationId: string;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    contactFirstname?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    contactLastname?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    contactEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    contactPhone?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineObject5
     */
    reservationWindowLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject5
     */
    recurringEnabled?: boolean;
    /**
     * super admin only field
     * @type {boolean}
     * @memberof InlineObject5
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * super admin only field
     * @type {number}
     * @memberof InlineObject5
     */
    billingPricePerCustomer?: number;
    /**
     * super admin only field
     * @type {string}
     * @memberof InlineObject5
     */
    billingStartDate?: string;
    /**
     * 
     * @type {BillingType}
     * @memberof InlineObject5
     */
    billingType?: BillingType;
    /**
     * super admin only field
     * @type {string}
     * @memberof InlineObject5
     */
    billingVoucherCode?: string;
    /**
     * super admin only field
     * @type {boolean}
     * @memberof InlineObject5
     */
    mapEnabled?: boolean;
    /**
     * super admin only field
     * @type {boolean}
     * @memberof InlineObject5
     */
    presentpaneEnabled?: boolean;
    /**
     * super admin only field
     * @type {number}
     * @memberof InlineObject5
     */
    employeeCount?: number;
    /**
     * super admin only field
     * @type {string}
     * @memberof InlineObject5
     */
    notes?: string;
    /**
     * super admin only field
     * @type {string}
     * @memberof InlineObject5
     */
    autoProvisioningDomain?: string;
    /**
     * super admin only field
     * @type {string}
     * @memberof InlineObject5
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    contactPhone: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineObject6
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineObject6
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    billingStartDate: string;
    /**
     * 
     * @type {BillingType}
     * @memberof InlineObject6
     */
    billingType: BillingType;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject6
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineObject6
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    locationId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject8
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    infix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject9
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject9
     */
    newsletter?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20010
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20010
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {InlineResponse20011Result}
     * @memberof InlineResponse20011
     */
    result?: InlineResponse20011Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20011Result
 */
export interface InlineResponse20011Result {
    /**
     * 
     * @type {InlineResponse20011ResultReportReason}
     * @memberof InlineResponse20011Result
     */
    reportReason?: InlineResponse20011ResultReportReason;
}
/**
 * 
 * @export
 * @interface InlineResponse20011ResultReportReason
 */
export interface InlineResponse20011ResultReportReason {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011ResultReportReason
     */
    id: string;
    /**
     * 
     * @type {InlineResponse2004ResultMapLocation}
     * @memberof InlineResponse20011ResultReportReason
     */
    location: InlineResponse2004ResultMapLocation;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011ResultReportReason
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20012
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20012Result}
     * @memberof InlineResponse20012
     */
    result?: InlineResponse20012Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20012Result
 */
export interface InlineResponse20012Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012Result
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse20012ResultItems>}
     * @memberof InlineResponse20012Result
     */
    items: Array<InlineResponse20012ResultItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse20012ResultItems
 */
export interface InlineResponse20012ResultItems {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012ResultItems
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ResultItems
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ResultItems
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ResultItems
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ResultItems
     */
    email: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse20012ResultItems
     */
    roles: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20013
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20013Result}
     * @memberof InlineResponse20013
     */
    result?: InlineResponse20013Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20013Result
 */
export interface InlineResponse20013Result {
    /**
     * 
     * @type {InlineResponse20012ResultItems}
     * @memberof InlineResponse20013Result
     */
    user?: InlineResponse20012ResultItems;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {InlineResponse20013Result}
     * @memberof InlineResponse20014
     */
    result?: InlineResponse20013Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20015
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {OAuthPasswordGrantResponse}
     * @memberof InlineResponse20015
     */
    result?: OAuthPasswordGrantResponse;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20016
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20016Result}
     * @memberof InlineResponse20016
     */
    result?: InlineResponse20016Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20016Result
 */
export interface InlineResponse20016Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20016Result
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse20016ResultItems>}
     * @memberof InlineResponse20016Result
     */
    items: Array<InlineResponse20016ResultItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse20016ResultItems
 */
export interface InlineResponse20016ResultItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    active_since?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016ResultItems
     */
    status?: InlineResponse20016ResultItemsStatusEnum;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof InlineResponse20016ResultItems
     */
    userGroups?: Array<UserGroup>;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse20016ResultItemsStatusEnum {
    Active = 'active',
    Inactive = 'inactive',
    Blocked = 'blocked'
}

/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20017
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20017Result}
     * @memberof InlineResponse20017
     */
    result?: InlineResponse20017Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20017Result
 */
export interface InlineResponse20017Result {
    /**
     * 
     * @type {InlineResponse20017ResultUser}
     * @memberof InlineResponse20017Result
     */
    user?: InlineResponse20017ResultUser;
}
/**
 * 
 * @export
 * @interface InlineResponse20017ResultUser
 */
export interface InlineResponse20017ResultUser {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    activeSince?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    deleted_at?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017ResultUser
     */
    status?: InlineResponse20017ResultUserStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse20017ResultUserStatusEnum {
    Active = 'active',
    Inactive = 'inactive',
    Blocked = 'blocked'
}

/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {InlineResponse20018Result}
     * @memberof InlineResponse20018
     */
    result?: InlineResponse20018Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20018Result
 */
export interface InlineResponse20018Result {
    /**
     * 
     * @type {InlineResponse20018ResultUser}
     * @memberof InlineResponse20018Result
     */
    user?: InlineResponse20018ResultUser;
}
/**
 * 
 * @export
 * @interface InlineResponse20018ResultUser
 */
export interface InlineResponse20018ResultUser {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    activeSince?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20018ResultUser
     */
    status?: InlineResponse20018ResultUserStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse20018ResultUserStatusEnum {
    Active = 'active',
    Inactive = 'inactive',
    Blocked = 'blocked'
}

/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20019
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20019Result}
     * @memberof InlineResponse20019
     */
    result?: InlineResponse20019Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20019Result
 */
export interface InlineResponse20019Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019Result
     */
    total: number;
    /**
     * 
     * @type {Array<LocationItem>}
     * @memberof InlineResponse20019Result
     */
    items: Array<LocationItem>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2002
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2002Result}
     * @memberof InlineResponse2002
     */
    result?: InlineResponse2002Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20020
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20020
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {InlineResponse20021Result}
     * @memberof InlineResponse20021
     */
    result?: InlineResponse20021Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20021Result
 */
export interface InlineResponse20021Result {
    /**
     * 
     * @type {LocationItem}
     * @memberof InlineResponse20021Result
     */
    location?: LocationItem;
}
/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20022
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20022Result}
     * @memberof InlineResponse20022
     */
    result?: InlineResponse20022Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20022Result
 */
export interface InlineResponse20022Result {
    /**
     * 
     * @type {Array<MapObject>}
     * @memberof InlineResponse20022Result
     */
    items: Array<MapObject>;
}
/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20023
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20023
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {InlineResponse20024Result}
     * @memberof InlineResponse20024
     */
    result?: InlineResponse20024Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20024Result
 */
export interface InlineResponse20024Result {
    /**
     * 
     * @type {MapObject}
     * @memberof InlineResponse20024Result
     */
    mapObject?: MapObject;
}
/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20025
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20025Result}
     * @memberof InlineResponse20025
     */
    result?: InlineResponse20025Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20025Result
 */
export interface InlineResponse20025Result {
    /**
     * 
     * @type {Array<Seat>}
     * @memberof InlineResponse20025Result
     */
    items: Array<Seat>;
}
/**
 * 
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
    /**
     * 
     * @type {InlineResponse20026Result}
     * @memberof InlineResponse20026
     */
    result?: InlineResponse20026Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20026Result
 */
export interface InlineResponse20026Result {
    /**
     * 
     * @type {Array<UsedSeat>}
     * @memberof InlineResponse20026Result
     */
    items: Array<UsedSeat>;
}
/**
 * 
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20027
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20027
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20028
 */
export interface InlineResponse20028 {
    /**
     * 
     * @type {InlineResponse20028Result}
     * @memberof InlineResponse20028
     */
    result?: InlineResponse20028Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20028Result
 */
export interface InlineResponse20028Result {
    /**
     * 
     * @type {Seat}
     * @memberof InlineResponse20028Result
     */
    seat?: Seat;
}
/**
 * 
 * @export
 * @interface InlineResponse20029
 */
export interface InlineResponse20029 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20029
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20029Result}
     * @memberof InlineResponse20029
     */
    result?: InlineResponse20029Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20029Result
 */
export interface InlineResponse20029Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20029Result
     */
    total: number;
    /**
     * 
     * @type {Array<SeatTag>}
     * @memberof InlineResponse20029Result
     */
    items: Array<SeatTag>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Result
 */
export interface InlineResponse2002Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Result
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse2002ResultItems>}
     * @memberof InlineResponse2002Result
     */
    items: Array<InlineResponse2002ResultItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002ResultItems
 */
export interface InlineResponse2002ResultItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultItems
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultItems
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultItems
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2002ResultItems
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultItems
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002ResultItems
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002ResultItems
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002ResultItems
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002ResultItems
     */
    order?: number;
    /**
     * 
     * @type {InlineResponse2002ResultLocation}
     * @memberof InlineResponse2002ResultItems
     */
    location?: InlineResponse2002ResultLocation;
}
/**
 * 
 * @export
 * @interface InlineResponse2002ResultLocation
 */
export interface InlineResponse2002ResultLocation {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultLocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002ResultLocation
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2003
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2003
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20030
 */
export interface InlineResponse20030 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20030
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20030
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20031
 */
export interface InlineResponse20031 {
    /**
     * 
     * @type {InlineResponse20031Result}
     * @memberof InlineResponse20031
     */
    result?: InlineResponse20031Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20031Result
 */
export interface InlineResponse20031Result {
    /**
     * 
     * @type {SeatTag}
     * @memberof InlineResponse20031Result
     */
    seatTag?: SeatTag;
}
/**
 * 
 * @export
 * @interface InlineResponse20032
 */
export interface InlineResponse20032 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20032
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20032Result}
     * @memberof InlineResponse20032
     */
    result?: InlineResponse20032Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20032Result
 */
export interface InlineResponse20032Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20032Result
     */
    total: number;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof InlineResponse20032Result
     */
    items: Array<UserGroup>;
}
/**
 * 
 * @export
 * @interface InlineResponse20033
 */
export interface InlineResponse20033 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20033
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20033
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20034
 */
export interface InlineResponse20034 {
    /**
     * 
     * @type {InlineResponse20034Result}
     * @memberof InlineResponse20034
     */
    result?: InlineResponse20034Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20034Result
 */
export interface InlineResponse20034Result {
    /**
     * 
     * @type {UserGroup}
     * @memberof InlineResponse20034Result
     */
    userGroup?: UserGroup;
}
/**
 * 
 * @export
 * @interface InlineResponse20035
 */
export interface InlineResponse20035 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20035
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20035Result}
     * @memberof InlineResponse20035
     */
    result?: InlineResponse20035Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20035Result
 */
export interface InlineResponse20035Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20035Result
     */
    total: number;
    /**
     * 
     * @type {Array<Timeslot>}
     * @memberof InlineResponse20035Result
     */
    items: Array<Timeslot>;
}
/**
 * 
 * @export
 * @interface InlineResponse20036
 */
export interface InlineResponse20036 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20036
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse20036
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse20037
 */
export interface InlineResponse20037 {
    /**
     * 
     * @type {InlineResponse20037Result}
     * @memberof InlineResponse20037
     */
    result?: InlineResponse20037Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20037Result
 */
export interface InlineResponse20037Result {
    /**
     * 
     * @type {Timeslot}
     * @memberof InlineResponse20037Result
     */
    timeslot?: Timeslot;
}
/**
 * 
 * @export
 * @interface InlineResponse20038
 */
export interface InlineResponse20038 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse20038
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse20038Result}
     * @memberof InlineResponse20038
     */
    result?: InlineResponse20038Result;
}
/**
 * 
 * @export
 * @interface InlineResponse20038Result
 */
export interface InlineResponse20038Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20038Result
     */
    total: number;
    /**
     * 
     * @type {Array<Reservation>}
     * @memberof InlineResponse20038Result
     */
    items: Array<Reservation>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {InlineResponse2004Result}
     * @memberof InlineResponse2004
     */
    result?: InlineResponse2004Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Result
 */
export interface InlineResponse2004Result {
    /**
     * 
     * @type {InlineResponse2004ResultMap}
     * @memberof InlineResponse2004Result
     */
    map?: InlineResponse2004ResultMap;
}
/**
 * 
 * @export
 * @interface InlineResponse2004ResultMap
 */
export interface InlineResponse2004ResultMap {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMap
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMap
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMap
     */
    floor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2004ResultMap
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMap
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMap
     */
    originalImage?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004ResultMap
     */
    originalImageScale?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004ResultMap
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004ResultMap
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004ResultMap
     */
    limitMaximumBookedResources?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004ResultMap
     */
    order?: number;
    /**
     * 
     * @type {InlineResponse2004ResultMapLocation}
     * @memberof InlineResponse2004ResultMap
     */
    location: InlineResponse2004ResultMapLocation;
}
/**
 * 
 * @export
 * @interface InlineResponse2004ResultMapLocation
 */
export interface InlineResponse2004ResultMapLocation {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMapLocation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004ResultMapLocation
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2005
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2005Result}
     * @memberof InlineResponse2005
     */
    result?: InlineResponse2005Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Result
 */
export interface InlineResponse2005Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Result
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse2002ResultLocation>}
     * @memberof InlineResponse2005Result
     */
    items: Array<InlineResponse2002ResultLocation>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2006
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2006Result}
     * @memberof InlineResponse2006
     */
    result?: InlineResponse2006Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Result
 */
export interface InlineResponse2006Result {
    /**
     * 
     * @type {InlineResponse2006ResultCompany}
     * @memberof InlineResponse2006Result
     */
    company?: InlineResponse2006ResultCompany;
}
/**
 * 
 * @export
 * @interface InlineResponse2006ResultCompany
 */
export interface InlineResponse2006ResultCompany {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    contactPhone: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    language?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    forceGeofence: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    mandatoryCheckIn: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006ResultCompany
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    forceTimeslotUse: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    checkInEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    checkInV2Enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    lunchEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    meetingEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    visitorsEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    recurringEnabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    overlappingUserReservationsEnabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006ResultCompany
     */
    billingPricePerCustomer: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    billingStartDate: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    billingType: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006ResultCompany
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006ResultCompany
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006ResultCompany
     */
    autoProvisioningDomain?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {InlineResponse2007Result}
     * @memberof InlineResponse2007
     */
    result?: InlineResponse2007Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2007Result
 */
export interface InlineResponse2007Result {
    /**
     * 
     * @type {InlineResponse2007ResultCompany}
     * @memberof InlineResponse2007Result
     */
    company?: InlineResponse2007ResultCompany;
}
/**
 * 
 * @export
 * @interface InlineResponse2007ResultCompany
 */
export interface InlineResponse2007ResultCompany {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    contactPhone: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007ResultCompany
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007ResultCompany
     */
    billingPricePerCustomer?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    billingStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    billingType: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007ResultCompany
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007ResultCompany
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ResultCompany
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Result}
     * @memberof InlineResponse2008
     */
    result?: InlineResponse2008Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2008Result
 */
export interface InlineResponse2008Result {
    /**
     * 
     * @type {InlineResponse2008ResultCompany}
     * @memberof InlineResponse2008Result
     */
    company?: InlineResponse2008ResultCompany;
}
/**
 * 
 * @export
 * @interface InlineResponse2008ResultCompany
 */
export interface InlineResponse2008ResultCompany {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    contactFirstname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    contactLastname: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    contactPhone: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    forceGeofence?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    mandatoryCheckIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008ResultCompany
     */
    reservationWindowLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    forceTimeslotUse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    checkInEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    lunchEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    meetingEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    visitorsEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    recurringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    overlappingUserReservationsEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008ResultCompany
     */
    billingPricePerCustomer?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    billingStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    billingType?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    billingVoucherCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    mapEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ResultCompany
     */
    presentpaneEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008ResultCompany
     */
    employeeCount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    autoProvisioningDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ResultCompany
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {ResponseMeta}
     * @memberof InlineResponse2009
     */
    meta?: ResponseMeta;
    /**
     * 
     * @type {InlineResponse2009Result}
     * @memberof InlineResponse2009
     */
    result?: InlineResponse2009Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2009Result
 */
export interface InlineResponse2009Result {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009Result
     */
    total: number;
    /**
     * 
     * @type {Array<InlineResponse2009ResultItems>}
     * @memberof InlineResponse2009Result
     */
    items: Array<InlineResponse2009ResultItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009ResultItems
 */
export interface InlineResponse2009ResultItems {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009ResultItems
     */
    id: string;
    /**
     * 
     * @type {InlineResponse2002ResultLocation}
     * @memberof InlineResponse2009ResultItems
     */
    location: InlineResponse2002ResultLocation;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009ResultItems
     */
    reason: string;
}
/**
 * 
 * @export
 * @interface InlineResponse404
 */
export interface InlineResponse404 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse404
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface LocationItem
 */
export interface LocationItem {
    /**
     * 
     * @type {string}
     * @memberof LocationItem
     */
    name: string;
    /**
     * 
     * @type {V3LocationAddress}
     * @memberof LocationItem
     */
    address: V3LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof LocationItem
     */
    parkingCount: number;
    /**
     * 
     * @type {string}
     * @memberof LocationItem
     */
    contactEmail: string;
    /**
     * 
     * @type {number}
     * @memberof LocationItem
     */
    bookingLimit: number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationItem
     */
    visible: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationItem
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationItem
     */
    id: string;
}
/**
 * 
 * @export
 * @interface LocationItemAllOf
 */
export interface LocationItemAllOf {
    /**
     * 
     * @type {string}
     * @memberof LocationItemAllOf
     */
    id: string;
}
/**
 * 
 * @export
 * @interface LocationWithoutId
 */
export interface LocationWithoutId {
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    name: string;
    /**
     * 
     * @type {V3LocationAddress}
     * @memberof LocationWithoutId
     */
    address: V3LocationAddress;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    parkingCount: number;
    /**
     * 
     * @type {string}
     * @memberof LocationWithoutId
     */
    contactEmail: string;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    bookingLimit: number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationWithoutId
     */
    visible: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationWithoutId
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface MapObject
 */
export interface MapObject {
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    layer?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    rotation?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    y?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObject
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    typeName?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObject
     */
    subTypeName?: string;
}
/**
 * 
 * @export
 * @interface MapObjectCreate
 */
export interface MapObjectCreate {
    /**
     * 
     * @type {string}
     * @memberof MapObjectCreate
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectCreate
     */
    layer: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectCreate
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    rotation?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectCreate
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObjectCreate
     */
    typeName: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectCreate
     */
    subTypeName?: string;
}
/**
 * 
 * @export
 * @interface MapObjectUpdate
 */
export interface MapObjectUpdate {
    /**
     * 
     * @type {string}
     * @memberof MapObjectUpdate
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectUpdate
     */
    layer?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectUpdate
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    rotation?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    y?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    scaleX?: number;
    /**
     * 
     * @type {number}
     * @memberof MapObjectUpdate
     */
    scaleY?: number;
    /**
     * 
     * @type {string}
     * @memberof MapObjectUpdate
     */
    typeName?: string;
    /**
     * 
     * @type {string}
     * @memberof MapObjectUpdate
     */
    subTypeName?: string;
}
/**
 * 
 * @export
 * @interface MeAdmin
 */
export interface MeAdmin {
    /**
     * 
     * @type {number}
     * @memberof MeAdmin
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof MeAdmin
     */
    lastName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    roles: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeAdmin
     */
    companyIds: Array<string>;
}
/**
 * 
 * @export
 * @interface MeUser
 */
export interface MeUser {
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    first_name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    last_name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUser
     */
    language: string;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    location_tracking_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    privacy_mode_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    push_enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MeUser
     */
    check_in_push_enabled: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof MeUser
     */
    companies: Array<object>;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof MeUser
     */
    userGroups: Array<UserGroup>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeUser
     */
    open_check_ins: Array<string>;
}
/**
 * 
 * @export
 * @interface OAuthPasswordGrantResponse
 */
export interface OAuthPasswordGrantResponse {
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthPasswordGrantResponse
     */
    token_type: string;
}
/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    id: string;
    /**
     * 
     * @type {User}
     * @memberof Reservation
     */
    user: User;
    /**
     * 
     * @type {ReservationSeat}
     * @memberof Reservation
     */
    seat: ReservationSeat;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof Reservation
     */
    includeParking: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Reservation
     */
    checkIn: boolean;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorName: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    visitorPhone: string;
}
/**
 * 
 * @export
 * @interface ReservationSeat
 */
export interface ReservationSeat {
    /**
     * 
     * @type {string}
     * @memberof ReservationSeat
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationSeat
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationSeat
     */
    type: string;
    /**
     * 
     * @type {ReservationSeatMap}
     * @memberof ReservationSeat
     */
    map: ReservationSeatMap;
    /**
     * 
     * @type {Array<SeatTag>}
     * @memberof ReservationSeat
     */
    seatTags: Array<SeatTag>;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof ReservationSeat
     */
    userGroups: Array<UserGroup>;
}
/**
 * 
 * @export
 * @interface ReservationSeatMap
 */
export interface ReservationSeatMap {
    /**
     * 
     * @type {string}
     * @memberof ReservationSeatMap
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationSeatMap
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationSeatMap
     */
    visible: boolean;
    /**
     * 
     * @type {ReservationSeatMapLocation}
     * @memberof ReservationSeatMap
     */
    location: ReservationSeatMapLocation;
}
/**
 * 
 * @export
 * @interface ReservationSeatMapLocation
 */
export interface ReservationSeatMapLocation {
    /**
     * 
     * @type {string}
     * @memberof ReservationSeatMapLocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationSeatMapLocation
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservationSeatMapLocation
     */
    visible: boolean;
}
/**
 * Information about this response (response time and status)
 * @export
 * @interface ResponseMeta
 */
export interface ResponseMeta {
    /**
     * 
     * @type {number}
     * @memberof ResponseMeta
     */
    status: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMeta
     */
    took: number;
}
/**
 * 
 * @export
 * @interface Seat
 */
export interface Seat {
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Seat
     */
    coordX?: number;
    /**
     * 
     * @type {number}
     * @memberof Seat
     */
    coordY?: number;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    blockfilter?: string;
    /**
     * 
     * @type {string}
     * @memberof Seat
     */
    seatType?: string;
}
/**
 * 
 * @export
 * @interface SeatCreate
 */
export interface SeatCreate {
    /**
     * 
     * @type {string}
     * @memberof SeatCreate
     */
    mapId: string;
    /**
     * 
     * @type {string}
     * @memberof SeatCreate
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatCreate
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SeatCreate
     */
    coordX: number;
    /**
     * 
     * @type {number}
     * @memberof SeatCreate
     */
    coordY: number;
    /**
     * 
     * @type {string}
     * @memberof SeatCreate
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatCreate
     */
    seatType: SeatType;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatCreate
     */
    userGroups: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatCreate
     */
    seatTags: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatSeatTag
 */
export interface SeatSeatTag {
    /**
     * 
     * @type {string}
     * @memberof SeatSeatTag
     */
    id: string;
}
/**
 * 
 * @export
 * @interface SeatTag
 */
export interface SeatTag {
    /**
     * 
     * @type {string}
     * @memberof SeatTag
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SeatTag
     */
    label: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SeatType {
    Desk = 'desk',
    Lunch = 'lunch',
    Meeting = 'meeting'
}

/**
 * 
 * @export
 * @interface SeatUpdate
 */
export interface SeatUpdate {
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SeatUpdate
     */
    coordX?: number;
    /**
     * 
     * @type {number}
     * @memberof SeatUpdate
     */
    coordY?: number;
    /**
     * 
     * @type {string}
     * @memberof SeatUpdate
     */
    blockfilter?: string;
    /**
     * 
     * @type {SeatType}
     * @memberof SeatUpdate
     */
    seatType?: SeatType;
    /**
     * 
     * @type {Array<SeatUserGroup>}
     * @memberof SeatUpdate
     */
    userGroups: Array<SeatUserGroup>;
    /**
     * 
     * @type {Array<SeatSeatTag>}
     * @memberof SeatUpdate
     */
    seatTags: Array<SeatSeatTag>;
}
/**
 * 
 * @export
 * @interface SeatUserGroup
 */
export interface SeatUserGroup {
    /**
     * 
     * @type {string}
     * @memberof SeatUserGroup
     */
    id: string;
}
/**
 * 
 * @export
 * @interface Timeslot
 */
export interface Timeslot {
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Timeslot
     */
    to: string;
    /**
     * 
     * @type {TimeslotType}
     * @memberof Timeslot
     */
    type: TimeslotType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TimeslotType {
    Desk = 'desk',
    Lunch = 'lunch',
    Visitor = 'visitor',
    Meeting = 'meeting'
}

/**
 * 
 * @export
 * @interface UsedSeat
 */
export interface UsedSeat {
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    mapId?: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    roomId?: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof UsedSeat
     */
    coordX?: number;
    /**
     * 
     * @type {number}
     * @memberof UsedSeat
     */
    coordY?: number;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    blockfilter?: string;
    /**
     * 
     * @type {string}
     * @memberof UsedSeat
     */
    seatType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsedSeat
     */
    dirty: boolean;
}
/**
 * 
 * @export
 * @interface UsedSeatAllOf
 */
export interface UsedSeatAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof UsedSeatAllOf
     */
    dirty: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    infix: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {Array<UserGroup>}
     * @memberof User
     */
    userGroups: Array<UserGroup>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    activeSince: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    language: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    status: UserStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserStatusEnum {
    Active = 'active',
    Inactive = 'inactive',
    Blocked = 'blocked'
}

/**
 * 
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    label: string;
}
/**
 * 
 * @export
 * @interface V3LocationAddress
 */
export interface V3LocationAddress {
    /**
     * 
     * @type {string}
     * @memberof V3LocationAddress
     */
    street: string;
    /**
     * 
     * @type {number}
     * @memberof V3LocationAddress
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof V3LocationAddress
     */
    addition: string;
    /**
     * 
     * @type {string}
     * @memberof V3LocationAddress
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof V3LocationAddress
     */
    city: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdminUser: async (inlineObject10: InlineObject10, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject10' is not null or undefined
            assertParamExists('addAdminUser', 'inlineObject10', inlineObject10)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject10, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany: async (inlineObject6: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('addCompany', 'inlineObject6', inlineObject6)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation: async (locationWithoutId: LocationWithoutId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationWithoutId' is not null or undefined
            assertParamExists('addLocation', 'locationWithoutId', locationWithoutId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationWithoutId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMap: async (inlineObject4: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('addMap', 'inlineObject4', inlineObject4)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapFile: async (mapId: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('addMapFile', 'mapId', mapId)
            const localVarPath = `/v3/map/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MapObjectCreate} mapObjectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapObject: async (mapObjectCreate: MapObjectCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectCreate' is not null or undefined
            assertParamExists('addMapObject', 'mapObjectCreate', mapObjectCreate)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapObjectCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject8} inlineObject8 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportReason: async (inlineObject8: InlineObject8, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject8' is not null or undefined
            assertParamExists('addReportReason', 'inlineObject8', inlineObject8)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject8, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeatCreate} seatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeat: async (seatCreate: SeatCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatCreate' is not null or undefined
            assertParamExists('addSeat', 'seatCreate', seatCreate)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeatTag: async (inlineObject15: InlineObject15, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject15' is not null or undefined
            assertParamExists('addSeatTag', 'inlineObject15', inlineObject15)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject15, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject19} inlineObject19 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeslot: async (inlineObject19: InlineObject19, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject19' is not null or undefined
            assertParamExists('addTimeslot', 'inlineObject19', inlineObject19)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject19, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (inlineObject12: InlineObject12, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject12' is not null or undefined
            assertParamExists('addUser', 'inlineObject12', inlineObject12)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject12, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserGroup: async (inlineObject17: InlineObject17, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject17' is not null or undefined
            assertParamExists('addUserGroup', 'inlineObject17', inlineObject17)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject17, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletMap: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('deletMap', 'mapId', mapId)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminUser: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteAdminUser', 'userId', userId)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCompany', 'companyId', companyId)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation: async (locationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('deleteLocation', 'locationId', locationId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapObject: async (mapObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('deleteMapObject', 'mapObjectId', mapObjectId)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportReason: async (reportReasonId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('deleteReportReason', 'reportReasonId', reportReasonId)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation: async (reservationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('deleteReservation', 'reservationId', reservationId)
            const localVarPath = `/v3/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reservationId !== undefined) {
                localVarQueryParameter['reservationId'] = reservationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeat: async (seatId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('deleteSeat', 'seatId', seatId)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatTag: async (tagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteSeatTag', 'tagId', tagId)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeslot: async (timeslotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('deleteTimeslot', 'timeslotId', timeslotId)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteUserGroup', 'groupId', groupId)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportReservations: async (companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('exportReservations', 'companyId', companyId)
            const localVarPath = `/v3/reservations/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fromOperator !== undefined) {
                localVarQueryParameter['fromOperator'] = fromOperator;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminUser: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAdminUser', 'userId', userId)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany', 'companyId', companyId)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany4App: async (companyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany4App', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations: async (companyId: string, from?: string, to?: string, location?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyReservations', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (locationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocation', 'locationId', locationId)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats: async (locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocationStats', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getLocationStats', 'date', date)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getLocationStats', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getLocationStats', 'to', to)
            // verify required parameter 'seatType' is not null or undefined
            assertParamExists('getLocationStats', 'seatType', seatType)
            const localVarPath = `/v2/location/{location_id}/stats`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (seatType !== undefined) {
                localVarQueryParameter['seat_type'] = seatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap: async (mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('getMap', 'mapId', mapId)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapObject: async (mapObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('getMapObject', 'mapObjectId', mapObjectId)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations: async (companyId?: string, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportReason: async (reportReasonId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('getReportReason', 'reportReasonId', reportReasonId)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeat: async (seatId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('getSeat', 'seatId', seatId)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatTag: async (tagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getSeatTag', 'tagId', tagId)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeslot: async (timeslotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('getTimeslot', 'timeslotId', timeslotId)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroup: async (groupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getUserGroup', 'groupId', groupId)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers: async (sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/admin-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies: async (sortField?: 'name', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: async (companyId: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listLocations', 'companyId', companyId)
            const localVarPath = `/v3/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMapObjects: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listMapObjects', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listMapObjects', 'mapId', mapId)
            const localVarPath = `/v3/mapobjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaps: async (companyId: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listMaps', 'companyId', companyId)
            const localVarPath = `/v3/maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReportReasons: async (companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReportReasons', 'companyId', companyId)
            const localVarPath = `/v3/report-reasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations: async (companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReservations', 'companyId', companyId)
            const localVarPath = `/v3/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fromOperator !== undefined) {
                localVarQueryParameter['fromOperator'] = fromOperator;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatTags: async (companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeatTags', 'companyId', companyId)
            const localVarPath = `/v3/seattags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeats: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeats', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listSeats', 'mapId', mapId)
            const localVarPath = `/v3/seats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatsUsage: async (companyId: string, mapId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSeatsUsage', 'companyId', companyId)
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('listSeatsUsage', 'mapId', mapId)
            const localVarPath = `/v3/seats/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeslots: async (companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTimeslots', 'companyId', companyId)
            const localVarPath = `/v3/timeslots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGroups: async (companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUserGroups', 'companyId', companyId)
            const localVarPath = `/v3/usergroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUsers', 'companyId', companyId)
            const localVarPath = `/v3/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (inviteSent !== undefined) {
                localVarQueryParameter['inviteSent'] = inviteSent;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsAdminUser: async (userId: number, clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('loginAsAdminUser', 'userId', userId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('loginAsAdminUser', 'clientId', clientId)
            const localVarPath = `/v3/admin-user/login-as`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant: async (clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to get reservations for
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservation: async (companyId: string, inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCompanyReservation', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/reservation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('requestLogin', 'inlineObject', inlineObject)
            const localVarPath = `/request-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {InlineObject9} inlineObject9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminUser: async (userId: number, inlineObject9: InlineObject9, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAdminUser', 'userId', userId)
            // verify required parameter 'inlineObject9' is not null or undefined
            assertParamExists('updateAdminUser', 'inlineObject9', inlineObject9)
            const localVarPath = `/v3/admin-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject9, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany: async (companyId: string, inlineObject5: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCompany', 'companyId', companyId)
            // verify required parameter 'inlineObject5' is not null or undefined
            assertParamExists('updateCompany', 'inlineObject5', inlineObject5)
            const localVarPath = `/v3/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (locationId: string, inlineObject13: InlineObject13, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('updateLocation', 'locationId', locationId)
            // verify required parameter 'inlineObject13' is not null or undefined
            assertParamExists('updateLocation', 'inlineObject13', inlineObject13)
            const localVarPath = `/v3/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject13, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap: async (mapId: string, inlineObject3: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapId' is not null or undefined
            assertParamExists('updateMap', 'mapId', mapId)
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('updateMap', 'inlineObject3', inlineObject3)
            const localVarPath = `/v3/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapId !== undefined) {
                localVarQueryParameter['mapId'] = mapId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectUpdate} mapObjectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMapObject: async (mapObjectId: string, mapObjectUpdate: MapObjectUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mapObjectId' is not null or undefined
            assertParamExists('updateMapObject', 'mapObjectId', mapObjectId)
            // verify required parameter 'mapObjectUpdate' is not null or undefined
            assertParamExists('updateMapObject', 'mapObjectUpdate', mapObjectUpdate)
            const localVarPath = `/v3/mapobject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mapObjectId !== undefined) {
                localVarQueryParameter['mapObjectId'] = mapObjectId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mapObjectUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportReason: async (reportReasonId: string, inlineObject7: InlineObject7, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportReasonId' is not null or undefined
            assertParamExists('updateReportReason', 'reportReasonId', reportReasonId)
            // verify required parameter 'inlineObject7' is not null or undefined
            assertParamExists('updateReportReason', 'inlineObject7', inlineObject7)
            const localVarPath = `/v3/report-reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reportReasonId !== undefined) {
                localVarQueryParameter['reportReasonId'] = reportReasonId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeat: async (seatId: string, seatUpdate: SeatUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seatId' is not null or undefined
            assertParamExists('updateSeat', 'seatId', seatId)
            // verify required parameter 'seatUpdate' is not null or undefined
            assertParamExists('updateSeat', 'seatUpdate', seatUpdate)
            const localVarPath = `/v3/seat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seatId !== undefined) {
                localVarQueryParameter['seatId'] = seatId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatTag: async (tagId: string, inlineObject14: InlineObject14, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('updateSeatTag', 'tagId', tagId)
            // verify required parameter 'inlineObject14' is not null or undefined
            assertParamExists('updateSeatTag', 'inlineObject14', inlineObject14)
            const localVarPath = `/v3/seattag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject14, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {InlineObject18} inlineObject18 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeslot: async (timeslotId: string, inlineObject18: InlineObject18, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeslotId' is not null or undefined
            assertParamExists('updateTimeslot', 'timeslotId', timeslotId)
            // verify required parameter 'inlineObject18' is not null or undefined
            assertParamExists('updateTimeslot', 'inlineObject18', inlineObject18)
            const localVarPath = `/v3/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timeslotId !== undefined) {
                localVarQueryParameter['timeslotId'] = timeslotId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject18, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, inlineObject11: InlineObject11, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'inlineObject11' is not null or undefined
            assertParamExists('updateUser', 'inlineObject11', inlineObject11)
            const localVarPath = `/v3/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject11, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {InlineObject16} inlineObject16 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroup: async (groupId: string, inlineObject16: InlineObject16, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateUserGroup', 'groupId', groupId)
            // verify required parameter 'inlineObject16' is not null or undefined
            assertParamExists('updateUserGroup', 'inlineObject16', inlineObject16)
            const localVarPath = `/v3/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject16, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdminUser(inlineObject10: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdminUser(inlineObject10, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCompany(inlineObject6: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCompany(inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLocation(locationWithoutId: LocationWithoutId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLocation(locationWithoutId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMap(inlineObject4: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMap(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMapFile(mapId: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMapFile(mapId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MapObjectCreate} mapObjectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMapObject(mapObjectCreate: MapObjectCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMapObject(mapObjectCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject8} inlineObject8 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReportReason(inlineObject8: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addReportReason(inlineObject8, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeatCreate} seatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSeat(seatCreate: SeatCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSeat(seatCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSeatTag(inlineObject15: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20031>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSeatTag(inlineObject15, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject19} inlineObject19 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeslot(inlineObject19: InlineObject19, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeslot(inlineObject19, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(inlineObject12: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(inlineObject12, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserGroup(inlineObject17: InlineObject17, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20034>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserGroup(inlineObject17, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletMap(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletMap(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminUser(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocation(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMapObject(mapObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMapObject(mapObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReportReason(reportReasonId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReportReason(reportReasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservation(reservationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservation(reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeat(seatId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeat(seatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeatTag(tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeatTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeslot(timeslotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeslot(timeslotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminUser(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany4App(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany4App(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyReservations(companyId, from, to, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(locationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationStats(locationId, date, from, to, seatType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMap(mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMap(mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMapObject(mapObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMapObject(mapObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeUser | MeAdmin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyReservations(companyId?: string, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyReservations(companyId, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportReason(reportReasonId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportReason(reportReasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeat(seatId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20027>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeat(seatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeatTag(tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20030>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeatTag(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeslot(timeslotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20036>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeslot(timeslotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroup(groupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20033>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanies(sortField?: 'name', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanies(sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocations(companyId: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocations(companyId, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMapObjects(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20022>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMapObjects(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMaps(companyId: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMaps(companyId, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReportReasons(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20038>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20029>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeatTags(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeats(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeats(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSeatsUsage(companyId: string, mapId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20026>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSeatsUsage(companyId, mapId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20035>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeslots(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20032>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserGroups(companyId, sortField, sortDirection, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAsAdminUser(userId: number, clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAsAdminUser(userId, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthPasswordGrantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to get reservations for
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompanyReservation(companyId: string, inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyReservation(companyId, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestLogin(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestLogin(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {InlineObject9} inlineObject9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdminUser(userId: number, inlineObject9: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdminUser(userId, inlineObject9, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany(companyId: string, inlineObject5: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(companyId, inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(locationId: string, inlineObject13: InlineObject13, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(locationId, inlineObject13, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMap(mapId: string, inlineObject3: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMap(mapId, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectUpdate} mapObjectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMapObject(mapObjectId: string, mapObjectUpdate: MapObjectUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMapObject(mapObjectId, mapObjectUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReportReason(reportReasonId: string, inlineObject7: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReportReason(reportReasonId, inlineObject7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeat(seatId, seatUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeatTag(tagId: string, inlineObject14: InlineObject14, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20031>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeatTag(tagId, inlineObject14, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {InlineObject18} inlineObject18 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeslot(timeslotId: string, inlineObject18: InlineObject18, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeslot(timeslotId, inlineObject18, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, inlineObject11: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, inlineObject11, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {InlineObject16} inlineObject16 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserGroup(groupId: string, inlineObject16: InlineObject16, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20034>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserGroup(groupId, inlineObject16, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdminUser(inlineObject10: InlineObject10, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.addAdminUser(inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompany(inlineObject6: InlineObject6, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.addCompany(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationWithoutId} locationWithoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation(locationWithoutId: LocationWithoutId, options?: any): AxiosPromise<InlineResponse20021> {
            return localVarFp.addLocation(locationWithoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMap(inlineObject4: InlineObject4, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.addMap(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapFile(mapId: string, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.addMapFile(mapId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MapObjectCreate} mapObjectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMapObject(mapObjectCreate: MapObjectCreate, options?: any): AxiosPromise<InlineResponse20024> {
            return localVarFp.addMapObject(mapObjectCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject8} inlineObject8 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportReason(inlineObject8: InlineObject8, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.addReportReason(inlineObject8, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeatCreate} seatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeat(seatCreate: SeatCreate, options?: any): AxiosPromise<InlineResponse20028> {
            return localVarFp.addSeat(seatCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSeatTag(inlineObject15: InlineObject15, options?: any): AxiosPromise<InlineResponse20031> {
            return localVarFp.addSeatTag(inlineObject15, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject19} inlineObject19 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeslot(inlineObject19: InlineObject19, options?: any): AxiosPromise<InlineResponse20037> {
            return localVarFp.addTimeslot(inlineObject19, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(inlineObject12: InlineObject12, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.addUser(inlineObject12, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject17} inlineObject17 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserGroup(inlineObject17: InlineObject17, options?: any): AxiosPromise<InlineResponse20034> {
            return localVarFp.addUserGroup(inlineObject17, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletMap(mapId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletMap(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminUser(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAdminUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany(companyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation(locationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapObject(mapObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMapObject(mapObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportReason(reportReasonId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReportReason(reportReasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reservationId Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReservation(reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeat(seatId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSeat(seatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatTag(tagId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSeatTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeslot(timeslotId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTimeslot(timeslotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroup(groupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any): AxiosPromise<any> {
            return localVarFp.exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminUser(userId: number, options?: any): AxiosPromise<InlineResponse20013> {
            return localVarFp.getAdminUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(companyId: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany4App(companyId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getCompany4App(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations Company
         * @summary Get reservations for Company
         * @param {string} companyId Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {string} [location] LocationId to get reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getCompanyReservations(companyId, from, to, location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(locationId: string, options?: any): AxiosPromise<InlineResponse20020> {
            return localVarFp.getLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stats for location
         * @summary Get stats for location
         * @param {string} locationId Location ID to get stats for
         * @param {string} date Date to get stats for
         * @param {string} from Start time to get stats for
         * @param {string} to End of time range
         * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any): AxiosPromise<object> {
            return localVarFp.getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(mapId: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getMap(mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMapObject(mapObjectId: string, options?: any): AxiosPromise<InlineResponse20023> {
            return localVarFp.getMapObject(mapObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get requestion user
         * @summary Get  user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<MeUser | MeAdmin> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * Get my reservations user
         * @summary Get reservations for user
         * @param {string} [companyId] Company ID to get reservations for
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyReservations(companyId?: string, from?: string, to?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getMyReservations(companyId, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportReason(reportReasonId: string, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getReportReason(reportReasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeat(seatId: string, options?: any): AxiosPromise<InlineResponse20027> {
            return localVarFp.getSeat(seatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatTag(tagId: string, options?: any): AxiosPromise<InlineResponse20030> {
            return localVarFp.getSeatTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeslot(timeslotId: string, options?: any): AxiosPromise<InlineResponse20036> {
            return localVarFp.getTimeslot(timeslotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<InlineResponse20017> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroup(groupId: string, options?: any): AxiosPromise<InlineResponse20033> {
            return localVarFp.getUserGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Check API health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'email'} [sortField] field to sort on
         * @param {string} [companyId] Company ID, required for company admin, optional for super admin
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'name'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanies(sortField?: 'name', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.listCompanies(sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(companyId: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20019> {
            return localVarFp.listLocations(companyId, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMapObjects(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20022> {
            return localVarFp.listMapObjects(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaps(companyId: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listMaps(companyId, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'reason'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.listReportReasons(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {string} [from] Start of daterange
         * @param {string} [to] End of daterange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any): AxiosPromise<InlineResponse20038> {
            return localVarFp.listReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20029> {
            return localVarFp.listSeatTags(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeats(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20025> {
            return localVarFp.listSeats(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {string} mapId Map ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSeatsUsage(companyId: string, mapId: string, options?: any): AxiosPromise<InlineResponse20026> {
            return localVarFp.listSeatsUsage(companyId, mapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'name' | 'from' | 'to'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20035> {
            return localVarFp.listTimeslots(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'label'} [sortField] field to sort on
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20032> {
            return localVarFp.listUserGroups(companyId, sortField, sortDirection, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
         * @param {boolean} [inviteSent] filter on whether an invite has been sent
         * @param {'asc' | 'desc'} [sortDirection] direction to sort to
         * @param {string} [filter] value to filter with
         * @param {number} [take] Amount of items to take
         * @param {number} [skip] Amount of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any): AxiosPromise<InlineResponse20016> {
            return localVarFp.listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsAdminUser(userId: number, clientId: string, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.loginAsAdminUser(userId, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Basic API metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(options?: any): AxiosPromise<void> {
            return localVarFp.metricsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * oAuth routes, eg password grant or refresh
         * @summary Oauth password grant
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {string} [refreshToken] 
         * @param {string} [grantType] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuthPasswordGrantResponse> {
            return localVarFp.oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * Post new reservation
         * @summary Post new reservation
         * @param {string} companyId Company ID to get reservations for
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyReservation(companyId: string, inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.postCompanyReservation(companyId, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Request login by post\'ing email for user
         * @summary Request Login
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLogin(inlineObject: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.requestLogin(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId User ID
         * @param {InlineObject9} inlineObject9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminUser(userId: number, inlineObject9: InlineObject9, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.updateAdminUser(userId, inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId Company ID
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(companyId: string, inlineObject5: InlineObject5, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.updateCompany(companyId, inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId Location ID
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(locationId: string, inlineObject13: InlineObject13, options?: any): AxiosPromise<InlineResponse20021> {
            return localVarFp.updateLocation(locationId, inlineObject13, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapId Map ID
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMap(mapId: string, inlineObject3: InlineObject3, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.updateMap(mapId, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mapObjectId MapObject ID
         * @param {MapObjectUpdate} mapObjectUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMapObject(mapObjectId: string, mapObjectUpdate: MapObjectUpdate, options?: any): AxiosPromise<InlineResponse20024> {
            return localVarFp.updateMapObject(mapObjectId, mapObjectUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reportReasonId Report reason ID
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportReason(reportReasonId: string, inlineObject7: InlineObject7, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.updateReportReason(reportReasonId, inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} seatId Seat ID
         * @param {SeatUpdate} seatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any): AxiosPromise<InlineResponse20028> {
            return localVarFp.updateSeat(seatId, seatUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tagId Tag ID
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatTag(tagId: string, inlineObject14: InlineObject14, options?: any): AxiosPromise<InlineResponse20031> {
            return localVarFp.updateSeatTag(tagId, inlineObject14, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} timeslotId Timeslot ID
         * @param {InlineObject18} inlineObject18 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeslot(timeslotId: string, inlineObject18: InlineObject18, options?: any): AxiosPromise<InlineResponse20037> {
            return localVarFp.updateTimeslot(timeslotId, inlineObject18, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId User ID
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, inlineObject11: InlineObject11, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.updateUser(userId, inlineObject11, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId Group ID
         * @param {InlineObject16} inlineObject16 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroup(groupId: string, inlineObject16: InlineObject16, options?: any): AxiosPromise<InlineResponse20034> {
            return localVarFp.updateUserGroup(groupId, inlineObject16, options).then((request) => request(axios, basePath));
        },
        /**
         * API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {InlineObject10} inlineObject10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdminUser(inlineObject10: InlineObject10, options?: any) {
        return DefaultApiFp(this.configuration).addAdminUser(inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject6} inlineObject6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCompany(inlineObject6: InlineObject6, options?: any) {
        return DefaultApiFp(this.configuration).addCompany(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationWithoutId} locationWithoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addLocation(locationWithoutId: LocationWithoutId, options?: any) {
        return DefaultApiFp(this.configuration).addLocation(locationWithoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMap(inlineObject4: InlineObject4, options?: any) {
        return DefaultApiFp(this.configuration).addMap(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMapFile(mapId: string, file?: any, options?: any) {
        return DefaultApiFp(this.configuration).addMapFile(mapId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MapObjectCreate} mapObjectCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMapObject(mapObjectCreate: MapObjectCreate, options?: any) {
        return DefaultApiFp(this.configuration).addMapObject(mapObjectCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject8} inlineObject8 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addReportReason(inlineObject8: InlineObject8, options?: any) {
        return DefaultApiFp(this.configuration).addReportReason(inlineObject8, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeatCreate} seatCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSeat(seatCreate: SeatCreate, options?: any) {
        return DefaultApiFp(this.configuration).addSeat(seatCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject15} inlineObject15 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSeatTag(inlineObject15: InlineObject15, options?: any) {
        return DefaultApiFp(this.configuration).addSeatTag(inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject19} inlineObject19 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTimeslot(inlineObject19: InlineObject19, options?: any) {
        return DefaultApiFp(this.configuration).addTimeslot(inlineObject19, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject12} inlineObject12 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(inlineObject12: InlineObject12, options?: any) {
        return DefaultApiFp(this.configuration).addUser(inlineObject12, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject17} inlineObject17 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUserGroup(inlineObject17: InlineObject17, options?: any) {
        return DefaultApiFp(this.configuration).addUserGroup(inlineObject17, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletMap(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).deletMap(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdminUser(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteAdminUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompany(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteLocation(locationId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMapObject(mapObjectId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteMapObject(mapObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReportReason(reportReasonId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReportReason(reportReasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reservationId Reservation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReservation(reservationId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteReservation(reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSeat(seatId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSeat(seatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSeatTag(tagId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSeatTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTimeslot(timeslotId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTimeslot(timeslotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(userId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserGroup(groupId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUserGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdminUser(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).getAdminUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany4App(companyId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompany4App(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations Company
     * @summary Get reservations for Company
     * @param {string} companyId Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {string} [location] LocationId to get reservations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyReservations(companyId: string, from?: string, to?: string, location?: string, options?: any) {
        return DefaultApiFp(this.configuration).getCompanyReservations(companyId, from, to, location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLocation(locationId: string, options?: any) {
        return DefaultApiFp(this.configuration).getLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stats for location
     * @summary Get stats for location
     * @param {string} locationId Location ID to get stats for
     * @param {string} date Date to get stats for
     * @param {string} from Start time to get stats for
     * @param {string} to End of time range
     * @param {'desk' | 'lunch' | 'meeting'} seatType Type of seat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLocationStats(locationId: string, date: string, from: string, to: string, seatType: 'desk' | 'lunch' | 'meeting', options?: any) {
        return DefaultApiFp(this.configuration).getLocationStats(locationId, date, from, to, seatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMap(mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMap(mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMapObject(mapObjectId: string, options?: any) {
        return DefaultApiFp(this.configuration).getMapObject(mapObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get requestion user
     * @summary Get  user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMe(options?: any) {
        return DefaultApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get my reservations user
     * @summary Get reservations for user
     * @param {string} [companyId] Company ID to get reservations for
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyReservations(companyId?: string, from?: string, to?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMyReservations(companyId, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReportReason(reportReasonId: string, options?: any) {
        return DefaultApiFp(this.configuration).getReportReason(reportReasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSeat(seatId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSeat(seatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSeatTag(tagId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSeatTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTimeslot(timeslotId: string, options?: any) {
        return DefaultApiFp(this.configuration).getTimeslot(timeslotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(userId: string, options?: any) {
        return DefaultApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserGroup(groupId: string, options?: any) {
        return DefaultApiFp(this.configuration).getUserGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check API health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: any) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'email'} [sortField] field to sort on
     * @param {string} [companyId] Company ID, required for company admin, optional for super admin
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdminUsers(sortField?: 'email', companyId?: string, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAdminUsers(sortField, companyId, sortDirection, filter, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'name'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCompanies(sortField?: 'name', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listCompanies(sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLocations(companyId: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listLocations(companyId, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMapObjects(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listMapObjects(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listMaps(companyId: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listMaps(companyId, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'reason'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listReportReasons(companyId: string, sortField?: 'reason', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listReportReasons(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte'} [fromOperator] Operator to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {string} [from] Start of daterange
     * @param {string} [to] End of daterange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listReservations(companyId: string, sortField?: 'date' | 'from' | 'to' | 'includeParking' | 'visitorName' | 'visitorEmail' | 'visitorPhone', sortDirection?: 'asc' | 'desc', filter?: string, fromOperator?: 'equals' | 'not' | 'gt' | 'gte' | 'lt' | 'lte', take?: number, skip?: number, from?: string, to?: string, options?: any) {
        return DefaultApiFp(this.configuration).listReservations(companyId, sortField, sortDirection, filter, fromOperator, take, skip, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'label'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeatTags(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSeatTags(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeats(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listSeats(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {string} mapId Map ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSeatsUsage(companyId: string, mapId: string, options?: any) {
        return DefaultApiFp(this.configuration).listSeatsUsage(companyId, mapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'name' | 'from' | 'to'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTimeslots(companyId: string, sortField?: 'name' | 'from' | 'to', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listTimeslots(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'label'} [sortField] field to sort on
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUserGroups(companyId: string, sortField?: 'label', sortDirection?: 'asc' | 'desc', take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listUserGroups(companyId, sortField, sortDirection, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {'firstName' | 'infix' | 'lastName' | 'email' | 'language'} [sortField] field to sort on
     * @param {boolean} [inviteSent] filter on whether an invite has been sent
     * @param {'asc' | 'desc'} [sortDirection] direction to sort to
     * @param {string} [filter] value to filter with
     * @param {number} [take] Amount of items to take
     * @param {number} [skip] Amount of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUsers(companyId: string, sortField?: 'firstName' | 'infix' | 'lastName' | 'email' | 'language', inviteSent?: boolean, sortDirection?: 'asc' | 'desc', filter?: string, take?: number, skip?: number, options?: any) {
        return DefaultApiFp(this.configuration).listUsers(companyId, sortField, inviteSent, sortDirection, filter, take, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {string} clientId Client ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginAsAdminUser(userId: number, clientId: string, options?: any) {
        return DefaultApiFp(this.configuration).loginAsAdminUser(userId, clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Basic API metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsGet(options?: any) {
        return DefaultApiFp(this.configuration).metricsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * oAuth routes, eg password grant or refresh
     * @summary Oauth password grant
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {string} [refreshToken] 
     * @param {string} [grantType] 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public oAuthPasswordGrant(clientId?: string, clientSecret?: string, refreshToken?: string, grantType?: string, username?: string, password?: string, options?: any) {
        return DefaultApiFp(this.configuration).oAuthPasswordGrant(clientId, clientSecret, refreshToken, grantType, username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post new reservation
     * @summary Post new reservation
     * @param {string} companyId Company ID to get reservations for
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCompanyReservation(companyId: string, inlineObject1?: InlineObject1, options?: any) {
        return DefaultApiFp(this.configuration).postCompanyReservation(companyId, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request login by post\'ing email for user
     * @summary Request Login
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestLogin(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).requestLogin(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId User ID
     * @param {InlineObject9} inlineObject9 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdminUser(userId: number, inlineObject9: InlineObject9, options?: any) {
        return DefaultApiFp(this.configuration).updateAdminUser(userId, inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId Company ID
     * @param {InlineObject5} inlineObject5 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCompany(companyId: string, inlineObject5: InlineObject5, options?: any) {
        return DefaultApiFp(this.configuration).updateCompany(companyId, inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationId Location ID
     * @param {InlineObject13} inlineObject13 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateLocation(locationId: string, inlineObject13: InlineObject13, options?: any) {
        return DefaultApiFp(this.configuration).updateLocation(locationId, inlineObject13, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapId Map ID
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMap(mapId: string, inlineObject3: InlineObject3, options?: any) {
        return DefaultApiFp(this.configuration).updateMap(mapId, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mapObjectId MapObject ID
     * @param {MapObjectUpdate} mapObjectUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMapObject(mapObjectId: string, mapObjectUpdate: MapObjectUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateMapObject(mapObjectId, mapObjectUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reportReasonId Report reason ID
     * @param {InlineObject7} inlineObject7 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReportReason(reportReasonId: string, inlineObject7: InlineObject7, options?: any) {
        return DefaultApiFp(this.configuration).updateReportReason(reportReasonId, inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} seatId Seat ID
     * @param {SeatUpdate} seatUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSeat(seatId: string, seatUpdate: SeatUpdate, options?: any) {
        return DefaultApiFp(this.configuration).updateSeat(seatId, seatUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tagId Tag ID
     * @param {InlineObject14} inlineObject14 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSeatTag(tagId: string, inlineObject14: InlineObject14, options?: any) {
        return DefaultApiFp(this.configuration).updateSeatTag(tagId, inlineObject14, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} timeslotId Timeslot ID
     * @param {InlineObject18} inlineObject18 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTimeslot(timeslotId: string, inlineObject18: InlineObject18, options?: any) {
        return DefaultApiFp(this.configuration).updateTimeslot(timeslotId, inlineObject18, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId User ID
     * @param {InlineObject11} inlineObject11 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(userId: string, inlineObject11: InlineObject11, options?: any) {
        return DefaultApiFp(this.configuration).updateUser(userId, inlineObject11, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId Group ID
     * @param {InlineObject16} inlineObject16 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserGroup(groupId: string, inlineObject16: InlineObject16, options?: any) {
        return DefaultApiFp(this.configuration).updateUserGroup(groupId, inlineObject16, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public versionGet(options?: any) {
        return DefaultApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}


